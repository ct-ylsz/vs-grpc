syntax = "proto3";

package vs;

option go_package = "pb/vs";

service VsService {

  rpc TagValuesGet(TagValuesGetReq) returns (TagValuesGetResp);

  rpc TagFeatureGet(TagFeatureGetReq) returns (TagFeatureGetResp);

  rpc TagTimeSection(TagTimeSectionReq) returns (TagTimeSectionResp);

  rpc TagDescGet(TagDescGetReq) returns (TagDescGetResp);

  rpc DbPing(DbPingReq) returns (DbPingResp);

  rpc TagCountByRangeGet(TagCountByRangeGetReq) returns (TagCountByRangeGetResp);

  rpc TagListGet(TagListGetReq) returns (TagListGetResp);

  rpc TagValuesByCountGet(TagValuesByCountGetReq) returns (TagValuesByCountGetResp);

  rpc ServiceStop(ServiceStopReq) returns (ServiceStopResp);

  rpc ReleaseConnect(ReleaseConnectReq) returns (ReleaseConnectResp);

  rpc TagSnapshotValue(TagSnapshotValueReq) returns (TagSnapshotValueResp);

  rpc GetRTDataByBatch(GetRTDataByBatchReq) returns (GetRTDataByBatchResp);

  rpc TagFractureSectionGet(TagFractureSectionGetReq) returns (TagFractureSectionGetResp);

  rpc TagAppendRTTagDataByBatch(TagAppendRTTagDataByBatchReq) returns (TagAppendRTTagDataByBatchResp);
}

message KVInfo{
  map<string, string> Kvs = 1;
}

message ErrInfo{
  int32 ErrCode = 1;
  bytes ErrMsg = 2;
}

message HeadReq{
  int32 Start = 1;
  int32 End = 2;
  int32 Period = 3;
  int32 ReqType = 4;
  bytes TagName = 5;
}

message TagFractureSectionGetReq{
  KVInfo Kvs = 1;
  HeadReq Head = 2;
  int32 Count = 3;
  map<string, bytes> Extends = 4;
}

message VsValueMap{
  map<string, bytes> ValueMap = 1;
}
message TagFractureSectionGetResp{
  ErrInfo Err = 1;
  repeated VsValueMap Values = 2;
  string ValueType = 3;
  int32 Start = 4;
  int32 End = 5;
}

message TagCountByRangeGetReq{
  KVInfo Kvs = 1;
  int32 Start = 2;
  int32 End = 3;
  bytes TagName = 4;
  int32 Count = 5;
}

message TagCountByRangeGetResp{
  ErrInfo Err = 1;
  int32 Count = 2;
}


message TagListGetReq{
  KVInfo Kvs = 1;
  int32 Page = 2;
  int32 Size = 3;
}

message TagListGetResp{
  ErrInfo Err = 1;
  message TagInfoMap{
    map<string, bytes> Infos = 1;
  }
  repeated TagInfoMap Tags = 2;
}

message DbPingReq{
  KVInfo Kvs = 1;
}

message DbPingResp{
  ErrInfo Err = 1;
  int32 Flag = 2;
}

message VsValue{
  double Value = 1;
  int32 Time = 2;
  int32 Status = 3;
}

message TagValuesByCountGetReq{
  KVInfo Kvs = 1;
  HeadReq Head = 2;
  int32 Count = 3;
  map<string, bytes> Meta = 4;
}

message TagValuesByCountGetResp{
  ErrInfo Err = 1;
  repeated VsValueMap Values = 2;
  string ValueType = 3;
  int32 Start = 4;
  int32 End = 5;
  bool IsLast = 6;
}

message TagValuesGetReq{
  KVInfo Kvs = 1;
  HeadReq Head = 2;
  map<string, bytes> Extend = 3;
}

message TagValuesGetResp{
  ErrInfo Err = 1;
  repeated VsValueMap Values = 2;
  int32 Start = 3;
  int32 End = 4;
}

message TagFeatureGetReq{
  KVInfo Kvs = 1;
  int64 Start = 2;
  int64 End = 3;
  bytes TagName = 4;
  repeated int32 Verifies = 5;
}

message TagFeatureGetResp{
  ErrInfo Err = 1;
  map<string, VsValue> Feats = 2;
  int32 Start = 3;
  int32 End = 4;
}

message TagDescGetReq{
  KVInfo Kvs = 1;
  bytes TagName = 2;
}

message TagDescGetResp{
  bytes TagName = 1;
  map<string, bytes> Desc = 2;
}

message TagTimeSectionReq{
  KVInfo Kvs = 1;
  bytes TagName = 2;
  int32 Start = 3;
  int32 End = 4;
}

message TagTimeSectionResp{
  ErrInfo Err = 1;
  int32 Start = 2;
  int32 End = 3;
}

message ServiceStopReq{
}

message ServiceStopResp{
}

message ReleaseConnectReq{
}

message ReleaseConnectResp{
}

message TagSnapshotValueReq{
  KVInfo Kvs = 1;
  bytes TagName = 2;
  int32 Start = 3;
  int32 End = 4;
}

message TagSnapshotValueResp{
  ErrInfo Err = 1;
  VsValueMap Values = 2;
}

message InsertData{
  int32 Type = 1;
  int32 Status = 2;
  double Value = 3;
  int32 Time = 4;
  string TagName = 5;
}

message TagAppendRTTagDataByBatchReq{
  KVInfo Kvs = 1;
  repeated InsertData Data = 2;
}

message TagAppendRTTagDataByBatchResp{
  ErrInfo Err = 1;
  repeated InsertData Data = 2;
}

message GetRTDataByBatchReq{
  KVInfo Kvs = 1;
  repeated bytes TagNames = 2;
}

message GetRTDataByBatchResp{
  ErrInfo Err = 1;
  repeated VsValueMap Values = 2;
}
