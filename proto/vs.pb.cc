// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vs.proto

#include "vs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vs {
constexpr KVInfo_KvsEntry_DoNotUse::KVInfo_KvsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct KVInfo_KvsEntry_DoNotUseDefaultTypeInternal {
  constexpr KVInfo_KvsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KVInfo_KvsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    KVInfo_KvsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KVInfo_KvsEntry_DoNotUseDefaultTypeInternal _KVInfo_KvsEntry_DoNotUse_default_instance_;
constexpr KVInfo::KVInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kvs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct KVInfoDefaultTypeInternal {
  constexpr KVInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KVInfoDefaultTypeInternal() {}
  union {
    KVInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KVInfoDefaultTypeInternal _KVInfo_default_instance_;
constexpr ErrInfo::ErrInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errcode_(0){}
struct ErrInfoDefaultTypeInternal {
  constexpr ErrInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrInfoDefaultTypeInternal() {}
  union {
    ErrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrInfoDefaultTypeInternal _ErrInfo_default_instance_;
constexpr HeadReq::HeadReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_(0)
  , end_(0)
  , period_(0)
  , reqtype_(0){}
struct HeadReqDefaultTypeInternal {
  constexpr HeadReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadReqDefaultTypeInternal() {}
  union {
    HeadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadReqDefaultTypeInternal _HeadReq_default_instance_;
constexpr TagFractureSectionGetReq_ExtendsEntry_DoNotUse::TagFractureSectionGetReq_ExtendsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TagFractureSectionGetReq_ExtendsEntry_DoNotUseDefaultTypeInternal {
  constexpr TagFractureSectionGetReq_ExtendsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagFractureSectionGetReq_ExtendsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TagFractureSectionGetReq_ExtendsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagFractureSectionGetReq_ExtendsEntry_DoNotUseDefaultTypeInternal _TagFractureSectionGetReq_ExtendsEntry_DoNotUse_default_instance_;
constexpr TagFractureSectionGetReq::TagFractureSectionGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extends_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , kvs_(nullptr)
  , head_(nullptr)
  , count_(0){}
struct TagFractureSectionGetReqDefaultTypeInternal {
  constexpr TagFractureSectionGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagFractureSectionGetReqDefaultTypeInternal() {}
  union {
    TagFractureSectionGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagFractureSectionGetReqDefaultTypeInternal _TagFractureSectionGetReq_default_instance_;
constexpr VsValueMap_ValueMapEntry_DoNotUse::VsValueMap_ValueMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VsValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal {
  constexpr VsValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VsValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VsValueMap_ValueMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VsValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal _VsValueMap_ValueMapEntry_DoNotUse_default_instance_;
constexpr VsValueMap::VsValueMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valuemap_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct VsValueMapDefaultTypeInternal {
  constexpr VsValueMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VsValueMapDefaultTypeInternal() {}
  union {
    VsValueMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VsValueMapDefaultTypeInternal _VsValueMap_default_instance_;
constexpr TagFractureSectionGetResp::TagFractureSectionGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , valuetype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_(nullptr)
  , start_(0)
  , end_(0){}
struct TagFractureSectionGetRespDefaultTypeInternal {
  constexpr TagFractureSectionGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagFractureSectionGetRespDefaultTypeInternal() {}
  union {
    TagFractureSectionGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagFractureSectionGetRespDefaultTypeInternal _TagFractureSectionGetResp_default_instance_;
constexpr TagCountByRangeGetReq::TagCountByRangeGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kvs_(nullptr)
  , start_(0)
  , end_(0)
  , count_(0){}
struct TagCountByRangeGetReqDefaultTypeInternal {
  constexpr TagCountByRangeGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagCountByRangeGetReqDefaultTypeInternal() {}
  union {
    TagCountByRangeGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagCountByRangeGetReqDefaultTypeInternal _TagCountByRangeGetReq_default_instance_;
constexpr TagCountByRangeGetResp::TagCountByRangeGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(nullptr)
  , count_(0){}
struct TagCountByRangeGetRespDefaultTypeInternal {
  constexpr TagCountByRangeGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagCountByRangeGetRespDefaultTypeInternal() {}
  union {
    TagCountByRangeGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagCountByRangeGetRespDefaultTypeInternal _TagCountByRangeGetResp_default_instance_;
constexpr TagListGetReq::TagListGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kvs_(nullptr)
  , page_(0)
  , size_(0){}
struct TagListGetReqDefaultTypeInternal {
  constexpr TagListGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagListGetReqDefaultTypeInternal() {}
  union {
    TagListGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagListGetReqDefaultTypeInternal _TagListGetReq_default_instance_;
constexpr TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TagListGetResp_TagInfoMap_InfosEntry_DoNotUseDefaultTypeInternal {
  constexpr TagListGetResp_TagInfoMap_InfosEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagListGetResp_TagInfoMap_InfosEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TagListGetResp_TagInfoMap_InfosEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagListGetResp_TagInfoMap_InfosEntry_DoNotUseDefaultTypeInternal _TagListGetResp_TagInfoMap_InfosEntry_DoNotUse_default_instance_;
constexpr TagListGetResp_TagInfoMap::TagListGetResp_TagInfoMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TagListGetResp_TagInfoMapDefaultTypeInternal {
  constexpr TagListGetResp_TagInfoMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagListGetResp_TagInfoMapDefaultTypeInternal() {}
  union {
    TagListGetResp_TagInfoMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagListGetResp_TagInfoMapDefaultTypeInternal _TagListGetResp_TagInfoMap_default_instance_;
constexpr TagListGetResp::TagListGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , err_(nullptr){}
struct TagListGetRespDefaultTypeInternal {
  constexpr TagListGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagListGetRespDefaultTypeInternal() {}
  union {
    TagListGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagListGetRespDefaultTypeInternal _TagListGetResp_default_instance_;
constexpr DbPingReq::DbPingReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kvs_(nullptr){}
struct DbPingReqDefaultTypeInternal {
  constexpr DbPingReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DbPingReqDefaultTypeInternal() {}
  union {
    DbPingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DbPingReqDefaultTypeInternal _DbPingReq_default_instance_;
constexpr DbPingResp::DbPingResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(nullptr)
  , flag_(0){}
struct DbPingRespDefaultTypeInternal {
  constexpr DbPingRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DbPingRespDefaultTypeInternal() {}
  union {
    DbPingResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DbPingRespDefaultTypeInternal _DbPingResp_default_instance_;
constexpr VsValue::VsValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , time_(0)
  , status_(0){}
struct VsValueDefaultTypeInternal {
  constexpr VsValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VsValueDefaultTypeInternal() {}
  union {
    VsValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VsValueDefaultTypeInternal _VsValue_default_instance_;
constexpr TagValuesByCountGetReq_MetaEntry_DoNotUse::TagValuesByCountGetReq_MetaEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TagValuesByCountGetReq_MetaEntry_DoNotUseDefaultTypeInternal {
  constexpr TagValuesByCountGetReq_MetaEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagValuesByCountGetReq_MetaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TagValuesByCountGetReq_MetaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagValuesByCountGetReq_MetaEntry_DoNotUseDefaultTypeInternal _TagValuesByCountGetReq_MetaEntry_DoNotUse_default_instance_;
constexpr TagValuesByCountGetReq::TagValuesByCountGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , kvs_(nullptr)
  , head_(nullptr)
  , count_(0){}
struct TagValuesByCountGetReqDefaultTypeInternal {
  constexpr TagValuesByCountGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagValuesByCountGetReqDefaultTypeInternal() {}
  union {
    TagValuesByCountGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagValuesByCountGetReqDefaultTypeInternal _TagValuesByCountGetReq_default_instance_;
constexpr TagValuesByCountGetResp::TagValuesByCountGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , valuetype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_(nullptr)
  , start_(0)
  , end_(0)
  , islast_(false){}
struct TagValuesByCountGetRespDefaultTypeInternal {
  constexpr TagValuesByCountGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagValuesByCountGetRespDefaultTypeInternal() {}
  union {
    TagValuesByCountGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagValuesByCountGetRespDefaultTypeInternal _TagValuesByCountGetResp_default_instance_;
constexpr TagValuesGetReq_ExtendEntry_DoNotUse::TagValuesGetReq_ExtendEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TagValuesGetReq_ExtendEntry_DoNotUseDefaultTypeInternal {
  constexpr TagValuesGetReq_ExtendEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagValuesGetReq_ExtendEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TagValuesGetReq_ExtendEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagValuesGetReq_ExtendEntry_DoNotUseDefaultTypeInternal _TagValuesGetReq_ExtendEntry_DoNotUse_default_instance_;
constexpr TagValuesGetReq::TagValuesGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extend_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , kvs_(nullptr)
  , head_(nullptr){}
struct TagValuesGetReqDefaultTypeInternal {
  constexpr TagValuesGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagValuesGetReqDefaultTypeInternal() {}
  union {
    TagValuesGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagValuesGetReqDefaultTypeInternal _TagValuesGetReq_default_instance_;
constexpr TagValuesGetResp::TagValuesGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , err_(nullptr)
  , start_(0)
  , end_(0){}
struct TagValuesGetRespDefaultTypeInternal {
  constexpr TagValuesGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagValuesGetRespDefaultTypeInternal() {}
  union {
    TagValuesGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagValuesGetRespDefaultTypeInternal _TagValuesGetResp_default_instance_;
constexpr TagFeatureGetReq::TagFeatureGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : verifies_()
  , _verifies_cached_byte_size_(0)
  , tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kvs_(nullptr)
  , start_(int64_t{0})
  , end_(int64_t{0}){}
struct TagFeatureGetReqDefaultTypeInternal {
  constexpr TagFeatureGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagFeatureGetReqDefaultTypeInternal() {}
  union {
    TagFeatureGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagFeatureGetReqDefaultTypeInternal _TagFeatureGetReq_default_instance_;
constexpr TagFeatureGetResp_FeatsEntry_DoNotUse::TagFeatureGetResp_FeatsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TagFeatureGetResp_FeatsEntry_DoNotUseDefaultTypeInternal {
  constexpr TagFeatureGetResp_FeatsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagFeatureGetResp_FeatsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TagFeatureGetResp_FeatsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagFeatureGetResp_FeatsEntry_DoNotUseDefaultTypeInternal _TagFeatureGetResp_FeatsEntry_DoNotUse_default_instance_;
constexpr TagFeatureGetResp::TagFeatureGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feats_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , err_(nullptr)
  , start_(0)
  , end_(0){}
struct TagFeatureGetRespDefaultTypeInternal {
  constexpr TagFeatureGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagFeatureGetRespDefaultTypeInternal() {}
  union {
    TagFeatureGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagFeatureGetRespDefaultTypeInternal _TagFeatureGetResp_default_instance_;
constexpr TagDescGetReq::TagDescGetReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kvs_(nullptr){}
struct TagDescGetReqDefaultTypeInternal {
  constexpr TagDescGetReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagDescGetReqDefaultTypeInternal() {}
  union {
    TagDescGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagDescGetReqDefaultTypeInternal _TagDescGetReq_default_instance_;
constexpr TagDescGetResp_DescEntry_DoNotUse::TagDescGetResp_DescEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TagDescGetResp_DescEntry_DoNotUseDefaultTypeInternal {
  constexpr TagDescGetResp_DescEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagDescGetResp_DescEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TagDescGetResp_DescEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagDescGetResp_DescEntry_DoNotUseDefaultTypeInternal _TagDescGetResp_DescEntry_DoNotUse_default_instance_;
constexpr TagDescGetResp::TagDescGetResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desc_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TagDescGetRespDefaultTypeInternal {
  constexpr TagDescGetRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagDescGetRespDefaultTypeInternal() {}
  union {
    TagDescGetResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagDescGetRespDefaultTypeInternal _TagDescGetResp_default_instance_;
constexpr TagTimeSectionReq::TagTimeSectionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kvs_(nullptr)
  , start_(0)
  , end_(0){}
struct TagTimeSectionReqDefaultTypeInternal {
  constexpr TagTimeSectionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagTimeSectionReqDefaultTypeInternal() {}
  union {
    TagTimeSectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagTimeSectionReqDefaultTypeInternal _TagTimeSectionReq_default_instance_;
constexpr TagTimeSectionResp::TagTimeSectionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(nullptr)
  , start_(0)
  , end_(0){}
struct TagTimeSectionRespDefaultTypeInternal {
  constexpr TagTimeSectionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagTimeSectionRespDefaultTypeInternal() {}
  union {
    TagTimeSectionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagTimeSectionRespDefaultTypeInternal _TagTimeSectionResp_default_instance_;
constexpr ServiceStopReq::ServiceStopReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServiceStopReqDefaultTypeInternal {
  constexpr ServiceStopReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceStopReqDefaultTypeInternal() {}
  union {
    ServiceStopReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceStopReqDefaultTypeInternal _ServiceStopReq_default_instance_;
constexpr ServiceStopResp::ServiceStopResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServiceStopRespDefaultTypeInternal {
  constexpr ServiceStopRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceStopRespDefaultTypeInternal() {}
  union {
    ServiceStopResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceStopRespDefaultTypeInternal _ServiceStopResp_default_instance_;
constexpr TagSnapshotValueReq::TagSnapshotValueReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kvs_(nullptr)
  , start_(0)
  , end_(0){}
struct TagSnapshotValueReqDefaultTypeInternal {
  constexpr TagSnapshotValueReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagSnapshotValueReqDefaultTypeInternal() {}
  union {
    TagSnapshotValueReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagSnapshotValueReqDefaultTypeInternal _TagSnapshotValueReq_default_instance_;
constexpr TagSnapshotValueResp::TagSnapshotValueResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(nullptr)
  , values_(nullptr){}
struct TagSnapshotValueRespDefaultTypeInternal {
  constexpr TagSnapshotValueRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagSnapshotValueRespDefaultTypeInternal() {}
  union {
    TagSnapshotValueResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagSnapshotValueRespDefaultTypeInternal _TagSnapshotValueResp_default_instance_;
}  // namespace vs
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vs_2eproto[36];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::vs::KVInfo_KvsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::KVInfo_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::KVInfo_KvsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::KVInfo_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::KVInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::KVInfo, kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::ErrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::ErrInfo, errcode_),
  PROTOBUF_FIELD_OFFSET(::vs::ErrInfo, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::HeadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::HeadReq, start_),
  PROTOBUF_FIELD_OFFSET(::vs::HeadReq, end_),
  PROTOBUF_FIELD_OFFSET(::vs::HeadReq, period_),
  PROTOBUF_FIELD_OFFSET(::vs::HeadReq, reqtype_),
  PROTOBUF_FIELD_OFFSET(::vs::HeadReq, tagname_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq, head_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq, count_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetReq, extends_),
  PROTOBUF_FIELD_OFFSET(::vs::VsValueMap_ValueMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::VsValueMap_ValueMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::VsValueMap_ValueMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::VsValueMap_ValueMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::VsValueMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::VsValueMap, valuemap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetResp, values_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetResp, valuetype_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetResp, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFractureSectionGetResp, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetReq, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetReq, end_),
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetReq, tagname_),
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetReq, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagCountByRangeGetResp, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetReq, page_),
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetReq, size_),
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp_TagInfoMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp_TagInfoMap, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagListGetResp, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::DbPingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::DbPingReq, kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::DbPingResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::DbPingResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::DbPingResp, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::VsValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::VsValue, value_),
  PROTOBUF_FIELD_OFFSET(::vs::VsValue, time_),
  PROTOBUF_FIELD_OFFSET(::vs::VsValue, status_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq, head_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq, count_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetReq, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetResp, values_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetResp, valuetype_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetResp, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetResp, end_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesByCountGetResp, islast_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq_ExtendEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq_ExtendEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq_ExtendEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq_ExtendEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq, head_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetReq, extend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetResp, values_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetResp, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagValuesGetResp, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetReq, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetReq, end_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetReq, tagname_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetReq, verifies_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp_FeatsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp_FeatsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp_FeatsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp_FeatsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp, feats_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagFeatureGetResp, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetReq, tagname_),
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetResp_DescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetResp_DescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetResp_DescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetResp_DescEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetResp, tagname_),
  PROTOBUF_FIELD_OFFSET(::vs::TagDescGetResp, desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionReq, tagname_),
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionReq, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionReq, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionResp, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagTimeSectionResp, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::ServiceStopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::ServiceStopResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueReq, kvs_),
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueReq, tagname_),
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueReq, start_),
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueReq, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueResp, err_),
  PROTOBUF_FIELD_OFFSET(::vs::TagSnapshotValueResp, values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::vs::KVInfo_KvsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::vs::KVInfo)},
  { 17, -1, -1, sizeof(::vs::ErrInfo)},
  { 25, -1, -1, sizeof(::vs::HeadReq)},
  { 36, 44, -1, sizeof(::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse)},
  { 46, -1, -1, sizeof(::vs::TagFractureSectionGetReq)},
  { 56, 64, -1, sizeof(::vs::VsValueMap_ValueMapEntry_DoNotUse)},
  { 66, -1, -1, sizeof(::vs::VsValueMap)},
  { 73, -1, -1, sizeof(::vs::TagFractureSectionGetResp)},
  { 84, -1, -1, sizeof(::vs::TagCountByRangeGetReq)},
  { 95, -1, -1, sizeof(::vs::TagCountByRangeGetResp)},
  { 103, -1, -1, sizeof(::vs::TagListGetReq)},
  { 112, 120, -1, sizeof(::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse)},
  { 122, -1, -1, sizeof(::vs::TagListGetResp_TagInfoMap)},
  { 129, -1, -1, sizeof(::vs::TagListGetResp)},
  { 137, -1, -1, sizeof(::vs::DbPingReq)},
  { 144, -1, -1, sizeof(::vs::DbPingResp)},
  { 152, -1, -1, sizeof(::vs::VsValue)},
  { 161, 169, -1, sizeof(::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse)},
  { 171, -1, -1, sizeof(::vs::TagValuesByCountGetReq)},
  { 181, -1, -1, sizeof(::vs::TagValuesByCountGetResp)},
  { 193, 201, -1, sizeof(::vs::TagValuesGetReq_ExtendEntry_DoNotUse)},
  { 203, -1, -1, sizeof(::vs::TagValuesGetReq)},
  { 212, -1, -1, sizeof(::vs::TagValuesGetResp)},
  { 222, -1, -1, sizeof(::vs::TagFeatureGetReq)},
  { 233, 241, -1, sizeof(::vs::TagFeatureGetResp_FeatsEntry_DoNotUse)},
  { 243, -1, -1, sizeof(::vs::TagFeatureGetResp)},
  { 253, -1, -1, sizeof(::vs::TagDescGetReq)},
  { 261, 269, -1, sizeof(::vs::TagDescGetResp_DescEntry_DoNotUse)},
  { 271, -1, -1, sizeof(::vs::TagDescGetResp)},
  { 279, -1, -1, sizeof(::vs::TagTimeSectionReq)},
  { 289, -1, -1, sizeof(::vs::TagTimeSectionResp)},
  { 298, -1, -1, sizeof(::vs::ServiceStopReq)},
  { 304, -1, -1, sizeof(::vs::ServiceStopResp)},
  { 310, -1, -1, sizeof(::vs::TagSnapshotValueReq)},
  { 320, -1, -1, sizeof(::vs::TagSnapshotValueResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_KVInfo_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_KVInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_ErrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_HeadReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagFractureSectionGetReq_ExtendsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagFractureSectionGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_VsValueMap_ValueMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_VsValueMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagFractureSectionGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagCountByRangeGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagCountByRangeGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagListGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagListGetResp_TagInfoMap_InfosEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagListGetResp_TagInfoMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagListGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_DbPingReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_DbPingResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_VsValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagValuesByCountGetReq_MetaEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagValuesByCountGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagValuesByCountGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagValuesGetReq_ExtendEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagValuesGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagValuesGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagFeatureGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagFeatureGetResp_FeatsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagFeatureGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagDescGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagDescGetResp_DescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagDescGetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagTimeSectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagTimeSectionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_ServiceStopReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_ServiceStopResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagSnapshotValueReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vs::_TagSnapshotValueResp_default_instance_),
};

const char descriptor_table_protodef_vs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010vs.proto\022\002vs\"V\n\006KVInfo\022 \n\003Kvs\030\001 \003(\0132\023."
  "vs.KVInfo.KvsEntry\032*\n\010KvsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"*\n\007ErrInfo\022\017\n\007Err"
  "Code\030\001 \001(\005\022\016\n\006ErrMsg\030\002 \001(\014\"W\n\007HeadReq\022\r\n"
  "\005Start\030\001 \001(\005\022\013\n\003End\030\002 \001(\005\022\016\n\006Period\030\003 \001("
  "\005\022\017\n\007ReqType\030\004 \001(\005\022\017\n\007TagName\030\005 \001(\014\"\311\001\n\030"
  "TagFractureSectionGetReq\022\027\n\003Kvs\030\001 \001(\0132\n."
  "vs.KVInfo\022\031\n\004Head\030\002 \001(\0132\013.vs.HeadReq\022\r\n\005"
  "Count\030\003 \001(\005\022:\n\007Extends\030\004 \003(\0132).vs.TagFra"
  "ctureSectionGetReq.ExtendsEntry\032.\n\014Exten"
  "dsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\""
  "m\n\nVsValueMap\022.\n\010ValueMap\030\001 \003(\0132\034.vs.VsV"
  "alueMap.ValueMapEntry\032/\n\rValueMapEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\204\001\n\031TagFr"
  "actureSectionGetResp\022\030\n\003Err\030\001 \001(\0132\013.vs.E"
  "rrInfo\022\036\n\006Values\030\002 \003(\0132\016.vs.VsValueMap\022\021"
  "\n\tValueType\030\003 \001(\t\022\r\n\005Start\030\004 \001(\005\022\013\n\003End\030"
  "\005 \001(\005\"l\n\025TagCountByRangeGetReq\022\027\n\003Kvs\030\001 "
  "\001(\0132\n.vs.KVInfo\022\r\n\005Start\030\002 \001(\005\022\013\n\003End\030\003 "
  "\001(\005\022\017\n\007TagName\030\004 \001(\014\022\r\n\005Count\030\005 \001(\005\"A\n\026T"
  "agCountByRangeGetResp\022\030\n\003Err\030\001 \001(\0132\013.vs."
  "ErrInfo\022\r\n\005Count\030\002 \001(\005\"D\n\rTagListGetReq\022"
  "\027\n\003Kvs\030\001 \001(\0132\n.vs.KVInfo\022\014\n\004Page\030\002 \001(\005\022\014"
  "\n\004Size\030\003 \001(\005\"\314\001\n\016TagListGetResp\022\030\n\003Err\030\001"
  " \001(\0132\013.vs.ErrInfo\022+\n\004Tags\030\002 \003(\0132\035.vs.Tag"
  "ListGetResp.TagInfoMap\032s\n\nTagInfoMap\0227\n\005"
  "Infos\030\001 \003(\0132(.vs.TagListGetResp.TagInfoM"
  "ap.InfosEntry\032,\n\nInfosEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\014:\0028\001\"$\n\tDbPingReq\022\027\n\003Kvs\030"
  "\001 \001(\0132\n.vs.KVInfo\"4\n\nDbPingResp\022\030\n\003Err\030\001"
  " \001(\0132\013.vs.ErrInfo\022\014\n\004Flag\030\002 \001(\005\"6\n\007VsVal"
  "ue\022\r\n\005Value\030\001 \001(\001\022\014\n\004Time\030\002 \001(\005\022\016\n\006Statu"
  "s\030\003 \001(\005\"\274\001\n\026TagValuesByCountGetReq\022\027\n\003Kv"
  "s\030\001 \001(\0132\n.vs.KVInfo\022\031\n\004Head\030\002 \001(\0132\013.vs.H"
  "eadReq\022\r\n\005Count\030\003 \001(\005\0222\n\004Meta\030\004 \003(\0132$.vs"
  ".TagValuesByCountGetReq.MetaEntry\032+\n\tMet"
  "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\222"
  "\001\n\027TagValuesByCountGetResp\022\030\n\003Err\030\001 \001(\0132"
  "\013.vs.ErrInfo\022\036\n\006Values\030\002 \003(\0132\016.vs.VsValu"
  "eMap\022\021\n\tValueType\030\003 \001(\t\022\r\n\005Start\030\004 \001(\005\022\013"
  "\n\003End\030\005 \001(\005\022\016\n\006IsLast\030\006 \001(\010\"\245\001\n\017TagValue"
  "sGetReq\022\027\n\003Kvs\030\001 \001(\0132\n.vs.KVInfo\022\031\n\004Head"
  "\030\002 \001(\0132\013.vs.HeadReq\022/\n\006Extend\030\003 \003(\0132\037.vs"
  ".TagValuesGetReq.ExtendEntry\032-\n\013ExtendEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"h\n\020T"
  "agValuesGetResp\022\030\n\003Err\030\001 \001(\0132\013.vs.ErrInf"
  "o\022\036\n\006Values\030\002 \003(\0132\016.vs.VsValueMap\022\r\n\005Sta"
  "rt\030\003 \001(\005\022\013\n\003End\030\004 \001(\005\"j\n\020TagFeatureGetRe"
  "q\022\027\n\003Kvs\030\001 \001(\0132\n.vs.KVInfo\022\r\n\005Start\030\002 \001("
  "\003\022\013\n\003End\030\003 \001(\003\022\017\n\007TagName\030\004 \001(\014\022\020\n\010Verif"
  "ies\030\005 \003(\005\"\265\001\n\021TagFeatureGetResp\022\030\n\003Err\030\001"
  " \001(\0132\013.vs.ErrInfo\022/\n\005Feats\030\002 \003(\0132 .vs.Ta"
  "gFeatureGetResp.FeatsEntry\022\r\n\005Start\030\003 \001("
  "\005\022\013\n\003End\030\004 \001(\005\0329\n\nFeatsEntry\022\013\n\003key\030\001 \001("
  "\t\022\032\n\005value\030\002 \001(\0132\013.vs.VsValue:\0028\001\"9\n\rTag"
  "DescGetReq\022\027\n\003Kvs\030\001 \001(\0132\n.vs.KVInfo\022\017\n\007T"
  "agName\030\002 \001(\014\"z\n\016TagDescGetResp\022\017\n\007TagNam"
  "e\030\001 \001(\014\022*\n\004Desc\030\002 \003(\0132\034.vs.TagDescGetRes"
  "p.DescEntry\032+\n\tDescEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\014:\0028\001\"Y\n\021TagTimeSectionReq\022\027\n"
  "\003Kvs\030\001 \001(\0132\n.vs.KVInfo\022\017\n\007TagName\030\002 \001(\014\022"
  "\r\n\005Start\030\003 \001(\005\022\013\n\003End\030\004 \001(\005\"J\n\022TagTimeSe"
  "ctionResp\022\030\n\003Err\030\001 \001(\0132\013.vs.ErrInfo\022\r\n\005S"
  "tart\030\002 \001(\005\022\013\n\003End\030\003 \001(\005\"\020\n\016ServiceStopRe"
  "q\"\021\n\017ServiceStopResp\"[\n\023TagSnapshotValue"
  "Req\022\027\n\003Kvs\030\001 \001(\0132\n.vs.KVInfo\022\017\n\007TagName\030"
  "\002 \001(\014\022\r\n\005Start\030\003 \001(\005\022\013\n\003End\030\004 \001(\005\"P\n\024Tag"
  "SnapshotValueResp\022\030\n\003Err\030\001 \001(\0132\013.vs.ErrI"
  "nfo\022\036\n\006Values\030\002 \001(\0132\016.vs.VsValueMap2\312\005\n\t"
  "VsService\0229\n\014TagValuesGet\022\023.vs.TagValues"
  "GetReq\032\024.vs.TagValuesGetResp\022<\n\rTagFeatu"
  "reGet\022\024.vs.TagFeatureGetReq\032\025.vs.TagFeat"
  "ureGetResp\022\?\n\016TagTimeSection\022\025.vs.TagTim"
  "eSectionReq\032\026.vs.TagTimeSectionResp\0223\n\nT"
  "agDescGet\022\021.vs.TagDescGetReq\032\022.vs.TagDes"
  "cGetResp\022\'\n\006DbPing\022\r.vs.DbPingReq\032\016.vs.D"
  "bPingResp\022K\n\022TagCountByRangeGet\022\031.vs.Tag"
  "CountByRangeGetReq\032\032.vs.TagCountByRangeG"
  "etResp\0223\n\nTagListGet\022\021.vs.TagListGetReq\032"
  "\022.vs.TagListGetResp\022N\n\023TagValuesByCountG"
  "et\022\032.vs.TagValuesByCountGetReq\032\033.vs.TagV"
  "aluesByCountGetResp\0226\n\013ServiceStop\022\022.vs."
  "ServiceStopReq\032\023.vs.ServiceStopResp\022E\n\020T"
  "agSnapshotValue\022\027.vs.TagSnapshotValueReq"
  "\032\030.vs.TagSnapshotValueResp\022T\n\025TagFractur"
  "eSectionGet\022\034.vs.TagFractureSectionGetRe"
  "q\032\035.vs.TagFractureSectionGetRespB\007Z\005pb/v"
  "sb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vs_2eproto = {
  false, false, 3489, descriptor_table_protodef_vs_2eproto, "vs.proto", 
  &descriptor_table_vs_2eproto_once, nullptr, 0, 36,
  schemas, file_default_instances, TableStruct_vs_2eproto::offsets,
  file_level_metadata_vs_2eproto, file_level_enum_descriptors_vs_2eproto, file_level_service_descriptors_vs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vs_2eproto_getter() {
  return &descriptor_table_vs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vs_2eproto(&descriptor_table_vs_2eproto);
namespace vs {

// ===================================================================

KVInfo_KvsEntry_DoNotUse::KVInfo_KvsEntry_DoNotUse() {}
KVInfo_KvsEntry_DoNotUse::KVInfo_KvsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void KVInfo_KvsEntry_DoNotUse::MergeFrom(const KVInfo_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata KVInfo_KvsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[0]);
}

// ===================================================================

class KVInfo::_Internal {
 public:
};

KVInfo::KVInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  kvs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.KVInfo)
}
KVInfo::KVInfo(const KVInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  // @@protoc_insertion_point(copy_constructor:vs.KVInfo)
}

void KVInfo::SharedCtor() {
}

KVInfo::~KVInfo() {
  // @@protoc_insertion_point(destructor:vs.KVInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KVInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KVInfo::ArenaDtor(void* object) {
  KVInfo* _this = reinterpret_cast< KVInfo* >(object);
  (void)_this;
  _this->kvs_. ~MapField();
}
inline void KVInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &KVInfo::ArenaDtor);
  }
}
void KVInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KVInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.KVInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&kvs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KVInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.KVInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> Kvs = 1;
  if (!this->_internal_kvs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.KVInfo.KvsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_kvs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_kvs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_kvs().begin();
          it != this->_internal_kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = KVInfo_KvsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_kvs().begin();
          it != this->_internal_kvs().end(); ++it) {
        target = KVInfo_KvsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.KVInfo)
  return target;
}

size_t KVInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.KVInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> Kvs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kvs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_kvs().begin();
      it != this->_internal_kvs().end(); ++it) {
    total_size += KVInfo_KvsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KVInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVInfo::GetClassData() const { return &_class_data_; }

void KVInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KVInfo *>(to)->MergeFrom(
      static_cast<const KVInfo &>(from));
}


void KVInfo::MergeFrom(const KVInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.KVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVInfo::CopyFrom(const KVInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.KVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVInfo::IsInitialized() const {
  return true;
}

void KVInfo::InternalSwap(KVInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  kvs_.InternalSwap(&other->kvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KVInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[1]);
}

// ===================================================================

class ErrInfo::_Internal {
 public:
};

ErrInfo::ErrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.ErrInfo)
}
ErrInfo::ErrInfo(const ErrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:vs.ErrInfo)
}

void ErrInfo::SharedCtor() {
errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
errcode_ = 0;
}

ErrInfo::~ErrInfo() {
  // @@protoc_insertion_point(destructor:vs.ErrInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrInfo::ArenaDtor(void* object) {
  ErrInfo* _this = reinterpret_cast< ErrInfo* >(object);
  (void)_this;
}
void ErrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.ErrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmpty();
  errcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ErrCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ErrMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.ErrInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ErrCode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes ErrMsg = 2;
  if (!this->_internal_errmsg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.ErrInfo)
  return target;
}

size_t ErrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.ErrInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ErrMsg = 2;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 ErrCode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrInfo::GetClassData() const { return &_class_data_; }

void ErrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ErrInfo *>(to)->MergeFrom(
      static_cast<const ErrInfo &>(from));
}


void ErrInfo::MergeFrom(const ErrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.ErrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrInfo::CopyFrom(const ErrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.ErrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrInfo::IsInitialized() const {
  return true;
}

void ErrInfo::InternalSwap(ErrInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[2]);
}

// ===================================================================

class HeadReq::_Internal {
 public:
};

HeadReq::HeadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.HeadReq)
}
HeadReq::HeadReq(const HeadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&reqtype_) -
    reinterpret_cast<char*>(&start_)) + sizeof(reqtype_));
  // @@protoc_insertion_point(copy_constructor:vs.HeadReq)
}

void HeadReq::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reqtype_) -
    reinterpret_cast<char*>(&start_)) + sizeof(reqtype_));
}

HeadReq::~HeadReq() {
  // @@protoc_insertion_point(destructor:vs.HeadReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeadReq::ArenaDtor(void* object) {
  HeadReq* _this = reinterpret_cast< HeadReq* >(object);
  (void)_this;
}
void HeadReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeadReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.HeadReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmpty();
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reqtype_) -
      reinterpret_cast<char*>(&start_)) + sizeof(reqtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ReqType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reqtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes TagName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeadReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.HeadReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 End = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  // int32 Period = 3;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_period(), target);
  }

  // int32 ReqType = 4;
  if (this->_internal_reqtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reqtype(), target);
  }

  // bytes TagName = 5;
  if (!this->_internal_tagname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tagname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.HeadReq)
  return target;
}

size_t HeadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.HeadReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TagName = 5;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tagname());
  }

  // int32 Start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 2;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  // int32 Period = 3;
  if (this->_internal_period() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_period());
  }

  // int32 ReqType = 4;
  if (this->_internal_reqtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeadReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeadReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeadReq::GetClassData() const { return &_class_data_; }

void HeadReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeadReq *>(to)->MergeFrom(
      static_cast<const HeadReq &>(from));
}


void HeadReq::MergeFrom(const HeadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.HeadReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from._internal_period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from._internal_reqtype() != 0) {
    _internal_set_reqtype(from._internal_reqtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeadReq::CopyFrom(const HeadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.HeadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadReq::IsInitialized() const {
  return true;
}

void HeadReq::InternalSwap(HeadReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadReq, reqtype_)
      + sizeof(HeadReq::reqtype_)
      - PROTOBUF_FIELD_OFFSET(HeadReq, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[3]);
}

// ===================================================================

TagFractureSectionGetReq_ExtendsEntry_DoNotUse::TagFractureSectionGetReq_ExtendsEntry_DoNotUse() {}
TagFractureSectionGetReq_ExtendsEntry_DoNotUse::TagFractureSectionGetReq_ExtendsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TagFractureSectionGetReq_ExtendsEntry_DoNotUse::MergeFrom(const TagFractureSectionGetReq_ExtendsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TagFractureSectionGetReq_ExtendsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[4]);
}

// ===================================================================

class TagFractureSectionGetReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagFractureSectionGetReq* msg);
  static const ::vs::HeadReq& head(const TagFractureSectionGetReq* msg);
};

const ::vs::KVInfo&
TagFractureSectionGetReq::_Internal::kvs(const TagFractureSectionGetReq* msg) {
  return *msg->kvs_;
}
const ::vs::HeadReq&
TagFractureSectionGetReq::_Internal::head(const TagFractureSectionGetReq* msg) {
  return *msg->head_;
}
TagFractureSectionGetReq::TagFractureSectionGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagFractureSectionGetReq)
}
TagFractureSectionGetReq::TagFractureSectionGetReq(const TagFractureSectionGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extends_.MergeFrom(from.extends_);
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  if (from._internal_has_head()) {
    head_ = new ::vs::HeadReq(*from.head_);
  } else {
    head_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:vs.TagFractureSectionGetReq)
}

void TagFractureSectionGetReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(count_));
}

TagFractureSectionGetReq::~TagFractureSectionGetReq() {
  // @@protoc_insertion_point(destructor:vs.TagFractureSectionGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagFractureSectionGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kvs_;
  if (this != internal_default_instance()) delete head_;
}

void TagFractureSectionGetReq::ArenaDtor(void* object) {
  TagFractureSectionGetReq* _this = reinterpret_cast< TagFractureSectionGetReq* >(object);
  (void)_this;
  _this->extends_. ~MapField();
}
inline void TagFractureSectionGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TagFractureSectionGetReq::ArenaDtor);
  }
}
void TagFractureSectionGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagFractureSectionGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagFractureSectionGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extends_.Clear();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagFractureSectionGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vs.HeadReq Head = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> Extends = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extends_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagFractureSectionGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagFractureSectionGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // .vs.HeadReq Head = 2;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::head(this), target, stream);
  }

  // int32 Count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // map<string, bytes> Extends = 4;
  if (!this->_internal_extends().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.TagFractureSectionGetReq.ExtendsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extends().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extends().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extends().begin();
          it != this->_internal_extends().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TagFractureSectionGetReq_ExtendsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extends().begin();
          it != this->_internal_extends().end(); ++it) {
        target = TagFractureSectionGetReq_ExtendsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagFractureSectionGetReq)
  return target;
}

size_t TagFractureSectionGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagFractureSectionGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> Extends = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extends_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extends().begin();
      it != this->_internal_extends().end(); ++it) {
    total_size += TagFractureSectionGetReq_ExtendsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // .vs.HeadReq Head = 2;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // int32 Count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagFractureSectionGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagFractureSectionGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagFractureSectionGetReq::GetClassData() const { return &_class_data_; }

void TagFractureSectionGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagFractureSectionGetReq *>(to)->MergeFrom(
      static_cast<const TagFractureSectionGetReq &>(from));
}


void TagFractureSectionGetReq::MergeFrom(const TagFractureSectionGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagFractureSectionGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extends_.MergeFrom(from.extends_);
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::vs::HeadReq::MergeFrom(from._internal_head());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagFractureSectionGetReq::CopyFrom(const TagFractureSectionGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagFractureSectionGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagFractureSectionGetReq::IsInitialized() const {
  return true;
}

void TagFractureSectionGetReq::InternalSwap(TagFractureSectionGetReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extends_.InternalSwap(&other->extends_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagFractureSectionGetReq, count_)
      + sizeof(TagFractureSectionGetReq::count_)
      - PROTOBUF_FIELD_OFFSET(TagFractureSectionGetReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagFractureSectionGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[5]);
}

// ===================================================================

VsValueMap_ValueMapEntry_DoNotUse::VsValueMap_ValueMapEntry_DoNotUse() {}
VsValueMap_ValueMapEntry_DoNotUse::VsValueMap_ValueMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VsValueMap_ValueMapEntry_DoNotUse::MergeFrom(const VsValueMap_ValueMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VsValueMap_ValueMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[6]);
}

// ===================================================================

class VsValueMap::_Internal {
 public:
};

VsValueMap::VsValueMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  valuemap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.VsValueMap)
}
VsValueMap::VsValueMap(const VsValueMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valuemap_.MergeFrom(from.valuemap_);
  // @@protoc_insertion_point(copy_constructor:vs.VsValueMap)
}

void VsValueMap::SharedCtor() {
}

VsValueMap::~VsValueMap() {
  // @@protoc_insertion_point(destructor:vs.VsValueMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VsValueMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VsValueMap::ArenaDtor(void* object) {
  VsValueMap* _this = reinterpret_cast< VsValueMap* >(object);
  (void)_this;
  _this->valuemap_. ~MapField();
}
inline void VsValueMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &VsValueMap::ArenaDtor);
  }
}
void VsValueMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VsValueMap::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.VsValueMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valuemap_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VsValueMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> ValueMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&valuemap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VsValueMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.VsValueMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> ValueMap = 1;
  if (!this->_internal_valuemap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.VsValueMap.ValueMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_valuemap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_valuemap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_valuemap().begin();
          it != this->_internal_valuemap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VsValueMap_ValueMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_valuemap().begin();
          it != this->_internal_valuemap().end(); ++it) {
        target = VsValueMap_ValueMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.VsValueMap)
  return target;
}

size_t VsValueMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.VsValueMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> ValueMap = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_valuemap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_valuemap().begin();
      it != this->_internal_valuemap().end(); ++it) {
    total_size += VsValueMap_ValueMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VsValueMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VsValueMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VsValueMap::GetClassData() const { return &_class_data_; }

void VsValueMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VsValueMap *>(to)->MergeFrom(
      static_cast<const VsValueMap &>(from));
}


void VsValueMap::MergeFrom(const VsValueMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.VsValueMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  valuemap_.MergeFrom(from.valuemap_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VsValueMap::CopyFrom(const VsValueMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.VsValueMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VsValueMap::IsInitialized() const {
  return true;
}

void VsValueMap::InternalSwap(VsValueMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  valuemap_.InternalSwap(&other->valuemap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VsValueMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[7]);
}

// ===================================================================

class TagFractureSectionGetResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagFractureSectionGetResp* msg);
};

const ::vs::ErrInfo&
TagFractureSectionGetResp::_Internal::err(const TagFractureSectionGetResp* msg) {
  return *msg->err_;
}
TagFractureSectionGetResp::TagFractureSectionGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagFractureSectionGetResp)
}
TagFractureSectionGetResp::TagFractureSectionGetResp(const TagFractureSectionGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valuetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valuetype().empty()) {
    valuetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_valuetype(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vs.TagFractureSectionGetResp)
}

void TagFractureSectionGetResp::SharedCtor() {
valuetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&err_)) + sizeof(end_));
}

TagFractureSectionGetResp::~TagFractureSectionGetResp() {
  // @@protoc_insertion_point(destructor:vs.TagFractureSectionGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagFractureSectionGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  valuetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_;
}

void TagFractureSectionGetResp::ArenaDtor(void* object) {
  TagFractureSectionGetResp* _this = reinterpret_cast< TagFractureSectionGetResp* >(object);
  (void)_this;
}
void TagFractureSectionGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagFractureSectionGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagFractureSectionGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagFractureSectionGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  valuetype_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagFractureSectionGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vs.VsValueMap Values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ValueType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_valuetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vs.TagFractureSectionGetResp.ValueType"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagFractureSectionGetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagFractureSectionGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // repeated .vs.VsValueMap Values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  // string ValueType = 3;
  if (!this->_internal_valuetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuetype().data(), static_cast<int>(this->_internal_valuetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vs.TagFractureSectionGetResp.ValueType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_valuetype(), target);
  }

  // int32 Start = 4;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_start(), target);
  }

  // int32 End = 5;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagFractureSectionGetResp)
  return target;
}

size_t TagFractureSectionGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagFractureSectionGetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vs.VsValueMap Values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ValueType = 3;
  if (!this->_internal_valuetype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuetype());
  }

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // int32 Start = 4;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 5;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagFractureSectionGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagFractureSectionGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagFractureSectionGetResp::GetClassData() const { return &_class_data_; }

void TagFractureSectionGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagFractureSectionGetResp *>(to)->MergeFrom(
      static_cast<const TagFractureSectionGetResp &>(from));
}


void TagFractureSectionGetResp::MergeFrom(const TagFractureSectionGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagFractureSectionGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!from._internal_valuetype().empty()) {
    _internal_set_valuetype(from._internal_valuetype());
  }
  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagFractureSectionGetResp::CopyFrom(const TagFractureSectionGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagFractureSectionGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagFractureSectionGetResp::IsInitialized() const {
  return true;
}

void TagFractureSectionGetResp::InternalSwap(TagFractureSectionGetResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &valuetype_, lhs_arena,
      &other->valuetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagFractureSectionGetResp, end_)
      + sizeof(TagFractureSectionGetResp::end_)
      - PROTOBUF_FIELD_OFFSET(TagFractureSectionGetResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagFractureSectionGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[8]);
}

// ===================================================================

class TagCountByRangeGetReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagCountByRangeGetReq* msg);
};

const ::vs::KVInfo&
TagCountByRangeGetReq::_Internal::kvs(const TagCountByRangeGetReq* msg) {
  return *msg->kvs_;
}
TagCountByRangeGetReq::TagCountByRangeGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagCountByRangeGetReq)
}
TagCountByRangeGetReq::TagCountByRangeGetReq(const TagCountByRangeGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&start_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:vs.TagCountByRangeGetReq)
}

void TagCountByRangeGetReq::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(count_));
}

TagCountByRangeGetReq::~TagCountByRangeGetReq() {
  // @@protoc_insertion_point(destructor:vs.TagCountByRangeGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagCountByRangeGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kvs_;
}

void TagCountByRangeGetReq::ArenaDtor(void* object) {
  TagCountByRangeGetReq* _this = reinterpret_cast< TagCountByRangeGetReq* >(object);
  (void)_this;
}
void TagCountByRangeGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagCountByRangeGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagCountByRangeGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagCountByRangeGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&start_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagCountByRangeGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes TagName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagCountByRangeGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagCountByRangeGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // int32 Start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_start(), target);
  }

  // int32 End = 3;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_end(), target);
  }

  // bytes TagName = 4;
  if (!this->_internal_tagname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tagname(), target);
  }

  // int32 Count = 5;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagCountByRangeGetReq)
  return target;
}

size_t TagCountByRangeGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagCountByRangeGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TagName = 4;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tagname());
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // int32 Start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 3;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  // int32 Count = 5;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagCountByRangeGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagCountByRangeGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagCountByRangeGetReq::GetClassData() const { return &_class_data_; }

void TagCountByRangeGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagCountByRangeGetReq *>(to)->MergeFrom(
      static_cast<const TagCountByRangeGetReq &>(from));
}


void TagCountByRangeGetReq::MergeFrom(const TagCountByRangeGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagCountByRangeGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagCountByRangeGetReq::CopyFrom(const TagCountByRangeGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagCountByRangeGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagCountByRangeGetReq::IsInitialized() const {
  return true;
}

void TagCountByRangeGetReq::InternalSwap(TagCountByRangeGetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagCountByRangeGetReq, count_)
      + sizeof(TagCountByRangeGetReq::count_)
      - PROTOBUF_FIELD_OFFSET(TagCountByRangeGetReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagCountByRangeGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[9]);
}

// ===================================================================

class TagCountByRangeGetResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagCountByRangeGetResp* msg);
};

const ::vs::ErrInfo&
TagCountByRangeGetResp::_Internal::err(const TagCountByRangeGetResp* msg) {
  return *msg->err_;
}
TagCountByRangeGetResp::TagCountByRangeGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagCountByRangeGetResp)
}
TagCountByRangeGetResp::TagCountByRangeGetResp(const TagCountByRangeGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:vs.TagCountByRangeGetResp)
}

void TagCountByRangeGetResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&err_)) + sizeof(count_));
}

TagCountByRangeGetResp::~TagCountByRangeGetResp() {
  // @@protoc_insertion_point(destructor:vs.TagCountByRangeGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagCountByRangeGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete err_;
}

void TagCountByRangeGetResp::ArenaDtor(void* object) {
  TagCountByRangeGetResp* _this = reinterpret_cast< TagCountByRangeGetResp* >(object);
  (void)_this;
}
void TagCountByRangeGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagCountByRangeGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagCountByRangeGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagCountByRangeGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagCountByRangeGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagCountByRangeGetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagCountByRangeGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagCountByRangeGetResp)
  return target;
}

size_t TagCountByRangeGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagCountByRangeGetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagCountByRangeGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagCountByRangeGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagCountByRangeGetResp::GetClassData() const { return &_class_data_; }

void TagCountByRangeGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagCountByRangeGetResp *>(to)->MergeFrom(
      static_cast<const TagCountByRangeGetResp &>(from));
}


void TagCountByRangeGetResp::MergeFrom(const TagCountByRangeGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagCountByRangeGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagCountByRangeGetResp::CopyFrom(const TagCountByRangeGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagCountByRangeGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagCountByRangeGetResp::IsInitialized() const {
  return true;
}

void TagCountByRangeGetResp::InternalSwap(TagCountByRangeGetResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagCountByRangeGetResp, count_)
      + sizeof(TagCountByRangeGetResp::count_)
      - PROTOBUF_FIELD_OFFSET(TagCountByRangeGetResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagCountByRangeGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[10]);
}

// ===================================================================

class TagListGetReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagListGetReq* msg);
};

const ::vs::KVInfo&
TagListGetReq::_Internal::kvs(const TagListGetReq* msg) {
  return *msg->kvs_;
}
TagListGetReq::TagListGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagListGetReq)
}
TagListGetReq::TagListGetReq(const TagListGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&page_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:vs.TagListGetReq)
}

void TagListGetReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(size_));
}

TagListGetReq::~TagListGetReq() {
  // @@protoc_insertion_point(destructor:vs.TagListGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagListGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kvs_;
}

void TagListGetReq::ArenaDtor(void* object) {
  TagListGetReq* _this = reinterpret_cast< TagListGetReq* >(object);
  (void)_this;
}
void TagListGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagListGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagListGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagListGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&page_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagListGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagListGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagListGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // int32 Page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page(), target);
  }

  // int32 Size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagListGetReq)
  return target;
}

size_t TagListGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagListGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // int32 Page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page());
  }

  // int32 Size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagListGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagListGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagListGetReq::GetClassData() const { return &_class_data_; }

void TagListGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagListGetReq *>(to)->MergeFrom(
      static_cast<const TagListGetReq &>(from));
}


void TagListGetReq::MergeFrom(const TagListGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagListGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagListGetReq::CopyFrom(const TagListGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagListGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagListGetReq::IsInitialized() const {
  return true;
}

void TagListGetReq::InternalSwap(TagListGetReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagListGetReq, size_)
      + sizeof(TagListGetReq::size_)
      - PROTOBUF_FIELD_OFFSET(TagListGetReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagListGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[11]);
}

// ===================================================================

TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse() {}
TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::MergeFrom(const TagListGetResp_TagInfoMap_InfosEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[12]);
}

// ===================================================================

class TagListGetResp_TagInfoMap::_Internal {
 public:
};

TagListGetResp_TagInfoMap::TagListGetResp_TagInfoMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagListGetResp.TagInfoMap)
}
TagListGetResp_TagInfoMap::TagListGetResp_TagInfoMap(const TagListGetResp_TagInfoMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  infos_.MergeFrom(from.infos_);
  // @@protoc_insertion_point(copy_constructor:vs.TagListGetResp.TagInfoMap)
}

void TagListGetResp_TagInfoMap::SharedCtor() {
}

TagListGetResp_TagInfoMap::~TagListGetResp_TagInfoMap() {
  // @@protoc_insertion_point(destructor:vs.TagListGetResp.TagInfoMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagListGetResp_TagInfoMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TagListGetResp_TagInfoMap::ArenaDtor(void* object) {
  TagListGetResp_TagInfoMap* _this = reinterpret_cast< TagListGetResp_TagInfoMap* >(object);
  (void)_this;
  _this->infos_. ~MapField();
}
inline void TagListGetResp_TagInfoMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TagListGetResp_TagInfoMap::ArenaDtor);
  }
}
void TagListGetResp_TagInfoMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagListGetResp_TagInfoMap::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagListGetResp.TagInfoMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagListGetResp_TagInfoMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> Infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&infos_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagListGetResp_TagInfoMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagListGetResp.TagInfoMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> Infos = 1;
  if (!this->_internal_infos().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.TagListGetResp.TagInfoMap.InfosEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_infos().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_infos().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_infos().begin();
          it != this->_internal_infos().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_infos().begin();
          it != this->_internal_infos().end(); ++it) {
        target = TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagListGetResp.TagInfoMap)
  return target;
}

size_t TagListGetResp_TagInfoMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagListGetResp.TagInfoMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> Infos = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_infos_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_infos().begin();
      it != this->_internal_infos().end(); ++it) {
    total_size += TagListGetResp_TagInfoMap_InfosEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagListGetResp_TagInfoMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagListGetResp_TagInfoMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagListGetResp_TagInfoMap::GetClassData() const { return &_class_data_; }

void TagListGetResp_TagInfoMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagListGetResp_TagInfoMap *>(to)->MergeFrom(
      static_cast<const TagListGetResp_TagInfoMap &>(from));
}


void TagListGetResp_TagInfoMap::MergeFrom(const TagListGetResp_TagInfoMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagListGetResp.TagInfoMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagListGetResp_TagInfoMap::CopyFrom(const TagListGetResp_TagInfoMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagListGetResp.TagInfoMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagListGetResp_TagInfoMap::IsInitialized() const {
  return true;
}

void TagListGetResp_TagInfoMap::InternalSwap(TagListGetResp_TagInfoMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagListGetResp_TagInfoMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[13]);
}

// ===================================================================

class TagListGetResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagListGetResp* msg);
};

const ::vs::ErrInfo&
TagListGetResp::_Internal::err(const TagListGetResp* msg) {
  return *msg->err_;
}
TagListGetResp::TagListGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagListGetResp)
}
TagListGetResp::TagListGetResp(const TagListGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vs.TagListGetResp)
}

void TagListGetResp::SharedCtor() {
err_ = nullptr;
}

TagListGetResp::~TagListGetResp() {
  // @@protoc_insertion_point(destructor:vs.TagListGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagListGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete err_;
}

void TagListGetResp::ArenaDtor(void* object) {
  TagListGetResp* _this = reinterpret_cast< TagListGetResp* >(object);
  (void)_this;
}
void TagListGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagListGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagListGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagListGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagListGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vs.TagListGetResp.TagInfoMap Tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagListGetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagListGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // repeated .vs.TagListGetResp.TagInfoMap Tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagListGetResp)
  return target;
}

size_t TagListGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagListGetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vs.TagListGetResp.TagInfoMap Tags = 2;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagListGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagListGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagListGetResp::GetClassData() const { return &_class_data_; }

void TagListGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagListGetResp *>(to)->MergeFrom(
      static_cast<const TagListGetResp &>(from));
}


void TagListGetResp::MergeFrom(const TagListGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagListGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagListGetResp::CopyFrom(const TagListGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagListGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagListGetResp::IsInitialized() const {
  return true;
}

void TagListGetResp::InternalSwap(TagListGetResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagListGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[14]);
}

// ===================================================================

class DbPingReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const DbPingReq* msg);
};

const ::vs::KVInfo&
DbPingReq::_Internal::kvs(const DbPingReq* msg) {
  return *msg->kvs_;
}
DbPingReq::DbPingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.DbPingReq)
}
DbPingReq::DbPingReq(const DbPingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vs.DbPingReq)
}

void DbPingReq::SharedCtor() {
kvs_ = nullptr;
}

DbPingReq::~DbPingReq() {
  // @@protoc_insertion_point(destructor:vs.DbPingReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DbPingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kvs_;
}

void DbPingReq::ArenaDtor(void* object) {
  DbPingReq* _this = reinterpret_cast< DbPingReq* >(object);
  (void)_this;
}
void DbPingReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbPingReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DbPingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.DbPingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbPingReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbPingReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.DbPingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.DbPingReq)
  return target;
}

size_t DbPingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.DbPingReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DbPingReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DbPingReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DbPingReq::GetClassData() const { return &_class_data_; }

void DbPingReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DbPingReq *>(to)->MergeFrom(
      static_cast<const DbPingReq &>(from));
}


void DbPingReq::MergeFrom(const DbPingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.DbPingReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DbPingReq::CopyFrom(const DbPingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.DbPingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbPingReq::IsInitialized() const {
  return true;
}

void DbPingReq::InternalSwap(DbPingReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(kvs_, other->kvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DbPingReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[15]);
}

// ===================================================================

class DbPingResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const DbPingResp* msg);
};

const ::vs::ErrInfo&
DbPingResp::_Internal::err(const DbPingResp* msg) {
  return *msg->err_;
}
DbPingResp::DbPingResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.DbPingResp)
}
DbPingResp::DbPingResp(const DbPingResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:vs.DbPingResp)
}

void DbPingResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&err_)) + sizeof(flag_));
}

DbPingResp::~DbPingResp() {
  // @@protoc_insertion_point(destructor:vs.DbPingResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DbPingResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete err_;
}

void DbPingResp::ArenaDtor(void* object) {
  DbPingResp* _this = reinterpret_cast< DbPingResp* >(object);
  (void)_this;
}
void DbPingResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbPingResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DbPingResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.DbPingResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbPingResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbPingResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.DbPingResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // int32 Flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.DbPingResp)
  return target;
}

size_t DbPingResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.DbPingResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // int32 Flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DbPingResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DbPingResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DbPingResp::GetClassData() const { return &_class_data_; }

void DbPingResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DbPingResp *>(to)->MergeFrom(
      static_cast<const DbPingResp &>(from));
}


void DbPingResp::MergeFrom(const DbPingResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.DbPingResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DbPingResp::CopyFrom(const DbPingResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.DbPingResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbPingResp::IsInitialized() const {
  return true;
}

void DbPingResp::InternalSwap(DbPingResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DbPingResp, flag_)
      + sizeof(DbPingResp::flag_)
      - PROTOBUF_FIELD_OFFSET(DbPingResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DbPingResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[16]);
}

// ===================================================================

class VsValue::_Internal {
 public:
};

VsValue::VsValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.VsValue)
}
VsValue::VsValue(const VsValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&value_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vs.VsValue)
}

void VsValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&value_)) + sizeof(status_));
}

VsValue::~VsValue() {
  // @@protoc_insertion_point(destructor:vs.VsValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VsValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VsValue::ArenaDtor(void* object) {
  VsValue* _this = reinterpret_cast< VsValue* >(object);
  (void)_this;
}
void VsValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VsValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VsValue::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.VsValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&value_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VsValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 Time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VsValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.VsValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Value = 1;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // int32 Time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  // int32 Status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.VsValue)
  return target;
}

size_t VsValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.VsValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Value = 1;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 Time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  // int32 Status = 3;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VsValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VsValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VsValue::GetClassData() const { return &_class_data_; }

void VsValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VsValue *>(to)->MergeFrom(
      static_cast<const VsValue &>(from));
}


void VsValue::MergeFrom(const VsValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.VsValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_value() <= 0 && from._internal_value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VsValue::CopyFrom(const VsValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.VsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VsValue::IsInitialized() const {
  return true;
}

void VsValue::InternalSwap(VsValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VsValue, status_)
      + sizeof(VsValue::status_)
      - PROTOBUF_FIELD_OFFSET(VsValue, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VsValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[17]);
}

// ===================================================================

TagValuesByCountGetReq_MetaEntry_DoNotUse::TagValuesByCountGetReq_MetaEntry_DoNotUse() {}
TagValuesByCountGetReq_MetaEntry_DoNotUse::TagValuesByCountGetReq_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TagValuesByCountGetReq_MetaEntry_DoNotUse::MergeFrom(const TagValuesByCountGetReq_MetaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TagValuesByCountGetReq_MetaEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[18]);
}

// ===================================================================

class TagValuesByCountGetReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagValuesByCountGetReq* msg);
  static const ::vs::HeadReq& head(const TagValuesByCountGetReq* msg);
};

const ::vs::KVInfo&
TagValuesByCountGetReq::_Internal::kvs(const TagValuesByCountGetReq* msg) {
  return *msg->kvs_;
}
const ::vs::HeadReq&
TagValuesByCountGetReq::_Internal::head(const TagValuesByCountGetReq* msg) {
  return *msg->head_;
}
TagValuesByCountGetReq::TagValuesByCountGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  meta_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagValuesByCountGetReq)
}
TagValuesByCountGetReq::TagValuesByCountGetReq(const TagValuesByCountGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meta_.MergeFrom(from.meta_);
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  if (from._internal_has_head()) {
    head_ = new ::vs::HeadReq(*from.head_);
  } else {
    head_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:vs.TagValuesByCountGetReq)
}

void TagValuesByCountGetReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(count_));
}

TagValuesByCountGetReq::~TagValuesByCountGetReq() {
  // @@protoc_insertion_point(destructor:vs.TagValuesByCountGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagValuesByCountGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kvs_;
  if (this != internal_default_instance()) delete head_;
}

void TagValuesByCountGetReq::ArenaDtor(void* object) {
  TagValuesByCountGetReq* _this = reinterpret_cast< TagValuesByCountGetReq* >(object);
  (void)_this;
  _this->meta_. ~MapField();
}
inline void TagValuesByCountGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TagValuesByCountGetReq::ArenaDtor);
  }
}
void TagValuesByCountGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagValuesByCountGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagValuesByCountGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_.Clear();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagValuesByCountGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vs.HeadReq Head = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> Meta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&meta_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagValuesByCountGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagValuesByCountGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // .vs.HeadReq Head = 2;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::head(this), target, stream);
  }

  // int32 Count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // map<string, bytes> Meta = 4;
  if (!this->_internal_meta().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.TagValuesByCountGetReq.MetaEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_meta().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_meta().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta().begin();
          it != this->_internal_meta().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TagValuesByCountGetReq_MetaEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta().begin();
          it != this->_internal_meta().end(); ++it) {
        target = TagValuesByCountGetReq_MetaEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagValuesByCountGetReq)
  return target;
}

size_t TagValuesByCountGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagValuesByCountGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> Meta = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_meta_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_meta().begin();
      it != this->_internal_meta().end(); ++it) {
    total_size += TagValuesByCountGetReq_MetaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // .vs.HeadReq Head = 2;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // int32 Count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagValuesByCountGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagValuesByCountGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagValuesByCountGetReq::GetClassData() const { return &_class_data_; }

void TagValuesByCountGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagValuesByCountGetReq *>(to)->MergeFrom(
      static_cast<const TagValuesByCountGetReq &>(from));
}


void TagValuesByCountGetReq::MergeFrom(const TagValuesByCountGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagValuesByCountGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meta_.MergeFrom(from.meta_);
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::vs::HeadReq::MergeFrom(from._internal_head());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagValuesByCountGetReq::CopyFrom(const TagValuesByCountGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagValuesByCountGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagValuesByCountGetReq::IsInitialized() const {
  return true;
}

void TagValuesByCountGetReq::InternalSwap(TagValuesByCountGetReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  meta_.InternalSwap(&other->meta_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagValuesByCountGetReq, count_)
      + sizeof(TagValuesByCountGetReq::count_)
      - PROTOBUF_FIELD_OFFSET(TagValuesByCountGetReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagValuesByCountGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[19]);
}

// ===================================================================

class TagValuesByCountGetResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagValuesByCountGetResp* msg);
};

const ::vs::ErrInfo&
TagValuesByCountGetResp::_Internal::err(const TagValuesByCountGetResp* msg) {
  return *msg->err_;
}
TagValuesByCountGetResp::TagValuesByCountGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagValuesByCountGetResp)
}
TagValuesByCountGetResp::TagValuesByCountGetResp(const TagValuesByCountGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valuetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valuetype().empty()) {
    valuetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_valuetype(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&islast_) -
    reinterpret_cast<char*>(&start_)) + sizeof(islast_));
  // @@protoc_insertion_point(copy_constructor:vs.TagValuesByCountGetResp)
}

void TagValuesByCountGetResp::SharedCtor() {
valuetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&islast_) -
    reinterpret_cast<char*>(&err_)) + sizeof(islast_));
}

TagValuesByCountGetResp::~TagValuesByCountGetResp() {
  // @@protoc_insertion_point(destructor:vs.TagValuesByCountGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagValuesByCountGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  valuetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_;
}

void TagValuesByCountGetResp::ArenaDtor(void* object) {
  TagValuesByCountGetResp* _this = reinterpret_cast< TagValuesByCountGetResp* >(object);
  (void)_this;
}
void TagValuesByCountGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagValuesByCountGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagValuesByCountGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagValuesByCountGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  valuetype_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islast_) -
      reinterpret_cast<char*>(&start_)) + sizeof(islast_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagValuesByCountGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vs.VsValueMap Values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ValueType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_valuetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vs.TagValuesByCountGetResp.ValueType"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsLast = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          islast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagValuesByCountGetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagValuesByCountGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // repeated .vs.VsValueMap Values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  // string ValueType = 3;
  if (!this->_internal_valuetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuetype().data(), static_cast<int>(this->_internal_valuetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vs.TagValuesByCountGetResp.ValueType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_valuetype(), target);
  }

  // int32 Start = 4;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_start(), target);
  }

  // int32 End = 5;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_end(), target);
  }

  // bool IsLast = 6;
  if (this->_internal_islast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_islast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagValuesByCountGetResp)
  return target;
}

size_t TagValuesByCountGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagValuesByCountGetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vs.VsValueMap Values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ValueType = 3;
  if (!this->_internal_valuetype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuetype());
  }

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // int32 Start = 4;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 5;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  // bool IsLast = 6;
  if (this->_internal_islast() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagValuesByCountGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagValuesByCountGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagValuesByCountGetResp::GetClassData() const { return &_class_data_; }

void TagValuesByCountGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagValuesByCountGetResp *>(to)->MergeFrom(
      static_cast<const TagValuesByCountGetResp &>(from));
}


void TagValuesByCountGetResp::MergeFrom(const TagValuesByCountGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagValuesByCountGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!from._internal_valuetype().empty()) {
    _internal_set_valuetype(from._internal_valuetype());
  }
  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from._internal_islast() != 0) {
    _internal_set_islast(from._internal_islast());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagValuesByCountGetResp::CopyFrom(const TagValuesByCountGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagValuesByCountGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagValuesByCountGetResp::IsInitialized() const {
  return true;
}

void TagValuesByCountGetResp::InternalSwap(TagValuesByCountGetResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &valuetype_, lhs_arena,
      &other->valuetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagValuesByCountGetResp, islast_)
      + sizeof(TagValuesByCountGetResp::islast_)
      - PROTOBUF_FIELD_OFFSET(TagValuesByCountGetResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagValuesByCountGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[20]);
}

// ===================================================================

TagValuesGetReq_ExtendEntry_DoNotUse::TagValuesGetReq_ExtendEntry_DoNotUse() {}
TagValuesGetReq_ExtendEntry_DoNotUse::TagValuesGetReq_ExtendEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TagValuesGetReq_ExtendEntry_DoNotUse::MergeFrom(const TagValuesGetReq_ExtendEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TagValuesGetReq_ExtendEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[21]);
}

// ===================================================================

class TagValuesGetReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagValuesGetReq* msg);
  static const ::vs::HeadReq& head(const TagValuesGetReq* msg);
};

const ::vs::KVInfo&
TagValuesGetReq::_Internal::kvs(const TagValuesGetReq* msg) {
  return *msg->kvs_;
}
const ::vs::HeadReq&
TagValuesGetReq::_Internal::head(const TagValuesGetReq* msg) {
  return *msg->head_;
}
TagValuesGetReq::TagValuesGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extend_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagValuesGetReq)
}
TagValuesGetReq::TagValuesGetReq(const TagValuesGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extend_.MergeFrom(from.extend_);
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  if (from._internal_has_head()) {
    head_ = new ::vs::HeadReq(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vs.TagValuesGetReq)
}

void TagValuesGetReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&head_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(head_));
}

TagValuesGetReq::~TagValuesGetReq() {
  // @@protoc_insertion_point(destructor:vs.TagValuesGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagValuesGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kvs_;
  if (this != internal_default_instance()) delete head_;
}

void TagValuesGetReq::ArenaDtor(void* object) {
  TagValuesGetReq* _this = reinterpret_cast< TagValuesGetReq* >(object);
  (void)_this;
  _this->extend_. ~MapField();
}
inline void TagValuesGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TagValuesGetReq::ArenaDtor);
  }
}
void TagValuesGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagValuesGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagValuesGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extend_.Clear();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagValuesGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vs.HeadReq Head = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> Extend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extend_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagValuesGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagValuesGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // .vs.HeadReq Head = 2;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::head(this), target, stream);
  }

  // map<string, bytes> Extend = 3;
  if (!this->_internal_extend().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.TagValuesGetReq.ExtendEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extend().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extend().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extend().begin();
          it != this->_internal_extend().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TagValuesGetReq_ExtendEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extend().begin();
          it != this->_internal_extend().end(); ++it) {
        target = TagValuesGetReq_ExtendEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagValuesGetReq)
  return target;
}

size_t TagValuesGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagValuesGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> Extend = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extend_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extend().begin();
      it != this->_internal_extend().end(); ++it) {
    total_size += TagValuesGetReq_ExtendEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // .vs.HeadReq Head = 2;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagValuesGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagValuesGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagValuesGetReq::GetClassData() const { return &_class_data_; }

void TagValuesGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagValuesGetReq *>(to)->MergeFrom(
      static_cast<const TagValuesGetReq &>(from));
}


void TagValuesGetReq::MergeFrom(const TagValuesGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagValuesGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extend_.MergeFrom(from.extend_);
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::vs::HeadReq::MergeFrom(from._internal_head());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagValuesGetReq::CopyFrom(const TagValuesGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagValuesGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagValuesGetReq::IsInitialized() const {
  return true;
}

void TagValuesGetReq::InternalSwap(TagValuesGetReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extend_.InternalSwap(&other->extend_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagValuesGetReq, head_)
      + sizeof(TagValuesGetReq::head_)
      - PROTOBUF_FIELD_OFFSET(TagValuesGetReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagValuesGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[22]);
}

// ===================================================================

class TagValuesGetResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagValuesGetResp* msg);
};

const ::vs::ErrInfo&
TagValuesGetResp::_Internal::err(const TagValuesGetResp* msg) {
  return *msg->err_;
}
TagValuesGetResp::TagValuesGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagValuesGetResp)
}
TagValuesGetResp::TagValuesGetResp(const TagValuesGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vs.TagValuesGetResp)
}

void TagValuesGetResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&err_)) + sizeof(end_));
}

TagValuesGetResp::~TagValuesGetResp() {
  // @@protoc_insertion_point(destructor:vs.TagValuesGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagValuesGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete err_;
}

void TagValuesGetResp::ArenaDtor(void* object) {
  TagValuesGetResp* _this = reinterpret_cast< TagValuesGetResp* >(object);
  (void)_this;
}
void TagValuesGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagValuesGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagValuesGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagValuesGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagValuesGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vs.VsValueMap Values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagValuesGetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagValuesGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // repeated .vs.VsValueMap Values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start(), target);
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagValuesGetResp)
  return target;
}

size_t TagValuesGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagValuesGetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vs.VsValueMap Values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagValuesGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagValuesGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagValuesGetResp::GetClassData() const { return &_class_data_; }

void TagValuesGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagValuesGetResp *>(to)->MergeFrom(
      static_cast<const TagValuesGetResp &>(from));
}


void TagValuesGetResp::MergeFrom(const TagValuesGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagValuesGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagValuesGetResp::CopyFrom(const TagValuesGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagValuesGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagValuesGetResp::IsInitialized() const {
  return true;
}

void TagValuesGetResp::InternalSwap(TagValuesGetResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagValuesGetResp, end_)
      + sizeof(TagValuesGetResp::end_)
      - PROTOBUF_FIELD_OFFSET(TagValuesGetResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagValuesGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[23]);
}

// ===================================================================

class TagFeatureGetReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagFeatureGetReq* msg);
};

const ::vs::KVInfo&
TagFeatureGetReq::_Internal::kvs(const TagFeatureGetReq* msg) {
  return *msg->kvs_;
}
TagFeatureGetReq::TagFeatureGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  verifies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagFeatureGetReq)
}
TagFeatureGetReq::TagFeatureGetReq(const TagFeatureGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      verifies_(from.verifies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vs.TagFeatureGetReq)
}

void TagFeatureGetReq::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(end_));
}

TagFeatureGetReq::~TagFeatureGetReq() {
  // @@protoc_insertion_point(destructor:vs.TagFeatureGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagFeatureGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kvs_;
}

void TagFeatureGetReq::ArenaDtor(void* object) {
  TagFeatureGetReq* _this = reinterpret_cast< TagFeatureGetReq* >(object);
  (void)_this;
}
void TagFeatureGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagFeatureGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagFeatureGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagFeatureGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  verifies_.Clear();
  tagname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagFeatureGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 End = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes TagName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Verifies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_verifies(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_verifies(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagFeatureGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagFeatureGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // int64 Start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start(), target);
  }

  // int64 End = 3;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_end(), target);
  }

  // bytes TagName = 4;
  if (!this->_internal_tagname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tagname(), target);
  }

  // repeated int32 Verifies = 5;
  {
    int byte_size = _verifies_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_verifies(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagFeatureGetReq)
  return target;
}

size_t TagFeatureGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagFeatureGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Verifies = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->verifies_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _verifies_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes TagName = 4;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tagname());
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // int64 Start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start());
  }

  // int64 End = 3;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagFeatureGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagFeatureGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagFeatureGetReq::GetClassData() const { return &_class_data_; }

void TagFeatureGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagFeatureGetReq *>(to)->MergeFrom(
      static_cast<const TagFeatureGetReq &>(from));
}


void TagFeatureGetReq::MergeFrom(const TagFeatureGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagFeatureGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  verifies_.MergeFrom(from.verifies_);
  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagFeatureGetReq::CopyFrom(const TagFeatureGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagFeatureGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagFeatureGetReq::IsInitialized() const {
  return true;
}

void TagFeatureGetReq::InternalSwap(TagFeatureGetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  verifies_.InternalSwap(&other->verifies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagFeatureGetReq, end_)
      + sizeof(TagFeatureGetReq::end_)
      - PROTOBUF_FIELD_OFFSET(TagFeatureGetReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagFeatureGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[24]);
}

// ===================================================================

TagFeatureGetResp_FeatsEntry_DoNotUse::TagFeatureGetResp_FeatsEntry_DoNotUse() {}
TagFeatureGetResp_FeatsEntry_DoNotUse::TagFeatureGetResp_FeatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TagFeatureGetResp_FeatsEntry_DoNotUse::MergeFrom(const TagFeatureGetResp_FeatsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TagFeatureGetResp_FeatsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[25]);
}

// ===================================================================

class TagFeatureGetResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagFeatureGetResp* msg);
};

const ::vs::ErrInfo&
TagFeatureGetResp::_Internal::err(const TagFeatureGetResp* msg) {
  return *msg->err_;
}
TagFeatureGetResp::TagFeatureGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  feats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagFeatureGetResp)
}
TagFeatureGetResp::TagFeatureGetResp(const TagFeatureGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  feats_.MergeFrom(from.feats_);
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vs.TagFeatureGetResp)
}

void TagFeatureGetResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&err_)) + sizeof(end_));
}

TagFeatureGetResp::~TagFeatureGetResp() {
  // @@protoc_insertion_point(destructor:vs.TagFeatureGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagFeatureGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete err_;
}

void TagFeatureGetResp::ArenaDtor(void* object) {
  TagFeatureGetResp* _this = reinterpret_cast< TagFeatureGetResp* >(object);
  (void)_this;
  _this->feats_. ~MapField();
}
inline void TagFeatureGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TagFeatureGetResp::ArenaDtor);
  }
}
void TagFeatureGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagFeatureGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagFeatureGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feats_.Clear();
  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagFeatureGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .vs.VsValue> Feats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&feats_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagFeatureGetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagFeatureGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // map<string, .vs.VsValue> Feats = 2;
  if (!this->_internal_feats().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vs::VsValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.TagFeatureGetResp.FeatsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_feats().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_feats().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vs::VsValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vs::VsValue >::const_iterator
          it = this->_internal_feats().begin();
          it != this->_internal_feats().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TagFeatureGetResp_FeatsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vs::VsValue >::const_iterator
          it = this->_internal_feats().begin();
          it != this->_internal_feats().end(); ++it) {
        target = TagFeatureGetResp_FeatsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start(), target);
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagFeatureGetResp)
  return target;
}

size_t TagFeatureGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagFeatureGetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .vs.VsValue> Feats = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_feats_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vs::VsValue >::const_iterator
      it = this->_internal_feats().begin();
      it != this->_internal_feats().end(); ++it) {
    total_size += TagFeatureGetResp_FeatsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagFeatureGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagFeatureGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagFeatureGetResp::GetClassData() const { return &_class_data_; }

void TagFeatureGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagFeatureGetResp *>(to)->MergeFrom(
      static_cast<const TagFeatureGetResp &>(from));
}


void TagFeatureGetResp::MergeFrom(const TagFeatureGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagFeatureGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feats_.MergeFrom(from.feats_);
  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagFeatureGetResp::CopyFrom(const TagFeatureGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagFeatureGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagFeatureGetResp::IsInitialized() const {
  return true;
}

void TagFeatureGetResp::InternalSwap(TagFeatureGetResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  feats_.InternalSwap(&other->feats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagFeatureGetResp, end_)
      + sizeof(TagFeatureGetResp::end_)
      - PROTOBUF_FIELD_OFFSET(TagFeatureGetResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagFeatureGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[26]);
}

// ===================================================================

class TagDescGetReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagDescGetReq* msg);
};

const ::vs::KVInfo&
TagDescGetReq::_Internal::kvs(const TagDescGetReq* msg) {
  return *msg->kvs_;
}
TagDescGetReq::TagDescGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagDescGetReq)
}
TagDescGetReq::TagDescGetReq(const TagDescGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vs.TagDescGetReq)
}

void TagDescGetReq::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kvs_ = nullptr;
}

TagDescGetReq::~TagDescGetReq() {
  // @@protoc_insertion_point(destructor:vs.TagDescGetReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagDescGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kvs_;
}

void TagDescGetReq::ArenaDtor(void* object) {
  TagDescGetReq* _this = reinterpret_cast< TagDescGetReq* >(object);
  (void)_this;
}
void TagDescGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagDescGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagDescGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagDescGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagDescGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes TagName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagDescGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagDescGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // bytes TagName = 2;
  if (!this->_internal_tagname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tagname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagDescGetReq)
  return target;
}

size_t TagDescGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagDescGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TagName = 2;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tagname());
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagDescGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagDescGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagDescGetReq::GetClassData() const { return &_class_data_; }

void TagDescGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagDescGetReq *>(to)->MergeFrom(
      static_cast<const TagDescGetReq &>(from));
}


void TagDescGetReq::MergeFrom(const TagDescGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagDescGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagDescGetReq::CopyFrom(const TagDescGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagDescGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagDescGetReq::IsInitialized() const {
  return true;
}

void TagDescGetReq::InternalSwap(TagDescGetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  swap(kvs_, other->kvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagDescGetReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[27]);
}

// ===================================================================

TagDescGetResp_DescEntry_DoNotUse::TagDescGetResp_DescEntry_DoNotUse() {}
TagDescGetResp_DescEntry_DoNotUse::TagDescGetResp_DescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TagDescGetResp_DescEntry_DoNotUse::MergeFrom(const TagDescGetResp_DescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TagDescGetResp_DescEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[28]);
}

// ===================================================================

class TagDescGetResp::_Internal {
 public:
};

TagDescGetResp::TagDescGetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  desc_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagDescGetResp)
}
TagDescGetResp::TagDescGetResp(const TagDescGetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  desc_.MergeFrom(from.desc_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vs.TagDescGetResp)
}

void TagDescGetResp::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TagDescGetResp::~TagDescGetResp() {
  // @@protoc_insertion_point(destructor:vs.TagDescGetResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagDescGetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TagDescGetResp::ArenaDtor(void* object) {
  TagDescGetResp* _this = reinterpret_cast< TagDescGetResp* >(object);
  (void)_this;
  _this->desc_. ~MapField();
}
inline void TagDescGetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TagDescGetResp::ArenaDtor);
  }
}
void TagDescGetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagDescGetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagDescGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.Clear();
  tagname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagDescGetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes TagName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> Desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagDescGetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagDescGetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes TagName = 1;
  if (!this->_internal_tagname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tagname(), target);
  }

  // map<string, bytes> Desc = 2;
  if (!this->_internal_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vs.TagDescGetResp.DescEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_desc().begin();
          it != this->_internal_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TagDescGetResp_DescEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_desc().begin();
          it != this->_internal_desc().end(); ++it) {
        target = TagDescGetResp_DescEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagDescGetResp)
  return target;
}

size_t TagDescGetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagDescGetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> Desc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_desc().begin();
      it != this->_internal_desc().end(); ++it) {
    total_size += TagDescGetResp_DescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes TagName = 1;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tagname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagDescGetResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagDescGetResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagDescGetResp::GetClassData() const { return &_class_data_; }

void TagDescGetResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagDescGetResp *>(to)->MergeFrom(
      static_cast<const TagDescGetResp &>(from));
}


void TagDescGetResp::MergeFrom(const TagDescGetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagDescGetResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  desc_.MergeFrom(from.desc_);
  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagDescGetResp::CopyFrom(const TagDescGetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagDescGetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagDescGetResp::IsInitialized() const {
  return true;
}

void TagDescGetResp::InternalSwap(TagDescGetResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  desc_.InternalSwap(&other->desc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TagDescGetResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[29]);
}

// ===================================================================

class TagTimeSectionReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagTimeSectionReq* msg);
};

const ::vs::KVInfo&
TagTimeSectionReq::_Internal::kvs(const TagTimeSectionReq* msg) {
  return *msg->kvs_;
}
TagTimeSectionReq::TagTimeSectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagTimeSectionReq)
}
TagTimeSectionReq::TagTimeSectionReq(const TagTimeSectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vs.TagTimeSectionReq)
}

void TagTimeSectionReq::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(end_));
}

TagTimeSectionReq::~TagTimeSectionReq() {
  // @@protoc_insertion_point(destructor:vs.TagTimeSectionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagTimeSectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kvs_;
}

void TagTimeSectionReq::ArenaDtor(void* object) {
  TagTimeSectionReq* _this = reinterpret_cast< TagTimeSectionReq* >(object);
  (void)_this;
}
void TagTimeSectionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagTimeSectionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagTimeSectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagTimeSectionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagTimeSectionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes TagName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagTimeSectionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagTimeSectionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // bytes TagName = 2;
  if (!this->_internal_tagname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tagname(), target);
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start(), target);
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagTimeSectionReq)
  return target;
}

size_t TagTimeSectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagTimeSectionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TagName = 2;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tagname());
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagTimeSectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagTimeSectionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagTimeSectionReq::GetClassData() const { return &_class_data_; }

void TagTimeSectionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagTimeSectionReq *>(to)->MergeFrom(
      static_cast<const TagTimeSectionReq &>(from));
}


void TagTimeSectionReq::MergeFrom(const TagTimeSectionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagTimeSectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagTimeSectionReq::CopyFrom(const TagTimeSectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagTimeSectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagTimeSectionReq::IsInitialized() const {
  return true;
}

void TagTimeSectionReq::InternalSwap(TagTimeSectionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagTimeSectionReq, end_)
      + sizeof(TagTimeSectionReq::end_)
      - PROTOBUF_FIELD_OFFSET(TagTimeSectionReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagTimeSectionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[30]);
}

// ===================================================================

class TagTimeSectionResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagTimeSectionResp* msg);
};

const ::vs::ErrInfo&
TagTimeSectionResp::_Internal::err(const TagTimeSectionResp* msg) {
  return *msg->err_;
}
TagTimeSectionResp::TagTimeSectionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagTimeSectionResp)
}
TagTimeSectionResp::TagTimeSectionResp(const TagTimeSectionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vs.TagTimeSectionResp)
}

void TagTimeSectionResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&err_)) + sizeof(end_));
}

TagTimeSectionResp::~TagTimeSectionResp() {
  // @@protoc_insertion_point(destructor:vs.TagTimeSectionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagTimeSectionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete err_;
}

void TagTimeSectionResp::ArenaDtor(void* object) {
  TagTimeSectionResp* _this = reinterpret_cast< TagTimeSectionResp* >(object);
  (void)_this;
}
void TagTimeSectionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagTimeSectionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagTimeSectionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagTimeSectionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagTimeSectionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagTimeSectionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagTimeSectionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // int32 Start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_start(), target);
  }

  // int32 End = 3;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagTimeSectionResp)
  return target;
}

size_t TagTimeSectionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagTimeSectionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // int32 Start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 3;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagTimeSectionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagTimeSectionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagTimeSectionResp::GetClassData() const { return &_class_data_; }

void TagTimeSectionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagTimeSectionResp *>(to)->MergeFrom(
      static_cast<const TagTimeSectionResp &>(from));
}


void TagTimeSectionResp::MergeFrom(const TagTimeSectionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagTimeSectionResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagTimeSectionResp::CopyFrom(const TagTimeSectionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagTimeSectionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagTimeSectionResp::IsInitialized() const {
  return true;
}

void TagTimeSectionResp::InternalSwap(TagTimeSectionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagTimeSectionResp, end_)
      + sizeof(TagTimeSectionResp::end_)
      - PROTOBUF_FIELD_OFFSET(TagTimeSectionResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagTimeSectionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[31]);
}

// ===================================================================

class ServiceStopReq::_Internal {
 public:
};

ServiceStopReq::ServiceStopReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:vs.ServiceStopReq)
}
ServiceStopReq::ServiceStopReq(const ServiceStopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vs.ServiceStopReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceStopReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceStopReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServiceStopReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[32]);
}

// ===================================================================

class ServiceStopResp::_Internal {
 public:
};

ServiceStopResp::ServiceStopResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:vs.ServiceStopResp)
}
ServiceStopResp::ServiceStopResp(const ServiceStopResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vs.ServiceStopResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceStopResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceStopResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ServiceStopResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[33]);
}

// ===================================================================

class TagSnapshotValueReq::_Internal {
 public:
  static const ::vs::KVInfo& kvs(const TagSnapshotValueReq* msg);
};

const ::vs::KVInfo&
TagSnapshotValueReq::_Internal::kvs(const TagSnapshotValueReq* msg) {
  return *msg->kvs_;
}
TagSnapshotValueReq::TagSnapshotValueReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagSnapshotValueReq)
}
TagSnapshotValueReq::TagSnapshotValueReq(const TagSnapshotValueReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tagname().empty()) {
    tagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_kvs()) {
    kvs_ = new ::vs::KVInfo(*from.kvs_);
  } else {
    kvs_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vs.TagSnapshotValueReq)
}

void TagSnapshotValueReq::SharedCtor() {
tagname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kvs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&kvs_)) + sizeof(end_));
}

TagSnapshotValueReq::~TagSnapshotValueReq() {
  // @@protoc_insertion_point(destructor:vs.TagSnapshotValueReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagSnapshotValueReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kvs_;
}

void TagSnapshotValueReq::ArenaDtor(void* object) {
  TagSnapshotValueReq* _this = reinterpret_cast< TagSnapshotValueReq* >(object);
  (void)_this;
}
void TagSnapshotValueReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagSnapshotValueReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagSnapshotValueReq::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagSnapshotValueReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && kvs_ != nullptr) {
    delete kvs_;
  }
  kvs_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagSnapshotValueReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.KVInfo Kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes TagName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tagname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 End = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagSnapshotValueReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagSnapshotValueReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kvs(this), target, stream);
  }

  // bytes TagName = 2;
  if (!this->_internal_tagname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tagname(), target);
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start(), target);
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagSnapshotValueReq)
  return target;
}

size_t TagSnapshotValueReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagSnapshotValueReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TagName = 2;
  if (!this->_internal_tagname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tagname());
  }

  // .vs.KVInfo Kvs = 1;
  if (this->_internal_has_kvs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kvs_);
  }

  // int32 Start = 3;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 End = 4;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagSnapshotValueReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagSnapshotValueReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagSnapshotValueReq::GetClassData() const { return &_class_data_; }

void TagSnapshotValueReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagSnapshotValueReq *>(to)->MergeFrom(
      static_cast<const TagSnapshotValueReq &>(from));
}


void TagSnapshotValueReq::MergeFrom(const TagSnapshotValueReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagSnapshotValueReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tagname().empty()) {
    _internal_set_tagname(from._internal_tagname());
  }
  if (from._internal_has_kvs()) {
    _internal_mutable_kvs()->::vs::KVInfo::MergeFrom(from._internal_kvs());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagSnapshotValueReq::CopyFrom(const TagSnapshotValueReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagSnapshotValueReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagSnapshotValueReq::IsInitialized() const {
  return true;
}

void TagSnapshotValueReq::InternalSwap(TagSnapshotValueReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagname_, lhs_arena,
      &other->tagname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagSnapshotValueReq, end_)
      + sizeof(TagSnapshotValueReq::end_)
      - PROTOBUF_FIELD_OFFSET(TagSnapshotValueReq, kvs_)>(
          reinterpret_cast<char*>(&kvs_),
          reinterpret_cast<char*>(&other->kvs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagSnapshotValueReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[34]);
}

// ===================================================================

class TagSnapshotValueResp::_Internal {
 public:
  static const ::vs::ErrInfo& err(const TagSnapshotValueResp* msg);
  static const ::vs::VsValueMap& values(const TagSnapshotValueResp* msg);
};

const ::vs::ErrInfo&
TagSnapshotValueResp::_Internal::err(const TagSnapshotValueResp* msg) {
  return *msg->err_;
}
const ::vs::VsValueMap&
TagSnapshotValueResp::_Internal::values(const TagSnapshotValueResp* msg) {
  return *msg->values_;
}
TagSnapshotValueResp::TagSnapshotValueResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vs.TagSnapshotValueResp)
}
TagSnapshotValueResp::TagSnapshotValueResp(const TagSnapshotValueResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    err_ = new ::vs::ErrInfo(*from.err_);
  } else {
    err_ = nullptr;
  }
  if (from._internal_has_values()) {
    values_ = new ::vs::VsValueMap(*from.values_);
  } else {
    values_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vs.TagSnapshotValueResp)
}

void TagSnapshotValueResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&values_) -
    reinterpret_cast<char*>(&err_)) + sizeof(values_));
}

TagSnapshotValueResp::~TagSnapshotValueResp() {
  // @@protoc_insertion_point(destructor:vs.TagSnapshotValueResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagSnapshotValueResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete err_;
  if (this != internal_default_instance()) delete values_;
}

void TagSnapshotValueResp::ArenaDtor(void* object) {
  TagSnapshotValueResp* _this = reinterpret_cast< TagSnapshotValueResp* >(object);
  (void)_this;
}
void TagSnapshotValueResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagSnapshotValueResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagSnapshotValueResp::Clear() {
// @@protoc_insertion_point(message_clear_start:vs.TagSnapshotValueResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && err_ != nullptr) {
    delete err_;
  }
  err_ = nullptr;
  if (GetArenaForAllocation() == nullptr && values_ != nullptr) {
    delete values_;
  }
  values_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagSnapshotValueResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vs.ErrInfo Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vs.VsValueMap Values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagSnapshotValueResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vs.TagSnapshotValueResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::err(this), target, stream);
  }

  // .vs.VsValueMap Values = 2;
  if (this->_internal_has_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vs.TagSnapshotValueResp)
  return target;
}

size_t TagSnapshotValueResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vs.TagSnapshotValueResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vs.ErrInfo Err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_);
  }

  // .vs.VsValueMap Values = 2;
  if (this->_internal_has_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagSnapshotValueResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TagSnapshotValueResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagSnapshotValueResp::GetClassData() const { return &_class_data_; }

void TagSnapshotValueResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TagSnapshotValueResp *>(to)->MergeFrom(
      static_cast<const TagSnapshotValueResp &>(from));
}


void TagSnapshotValueResp::MergeFrom(const TagSnapshotValueResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vs.TagSnapshotValueResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _internal_mutable_err()->::vs::ErrInfo::MergeFrom(from._internal_err());
  }
  if (from._internal_has_values()) {
    _internal_mutable_values()->::vs::VsValueMap::MergeFrom(from._internal_values());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagSnapshotValueResp::CopyFrom(const TagSnapshotValueResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vs.TagSnapshotValueResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagSnapshotValueResp::IsInitialized() const {
  return true;
}

void TagSnapshotValueResp::InternalSwap(TagSnapshotValueResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagSnapshotValueResp, values_)
      + sizeof(TagSnapshotValueResp::values_)
      - PROTOBUF_FIELD_OFFSET(TagSnapshotValueResp, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagSnapshotValueResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vs_2eproto_getter, &descriptor_table_vs_2eproto_once,
      file_level_metadata_vs_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vs::KVInfo_KvsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::KVInfo_KvsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::KVInfo_KvsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::KVInfo* Arena::CreateMaybeMessage< ::vs::KVInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::KVInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::ErrInfo* Arena::CreateMaybeMessage< ::vs::ErrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::ErrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::HeadReq* Arena::CreateMaybeMessage< ::vs::HeadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::HeadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagFractureSectionGetReq_ExtendsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagFractureSectionGetReq* Arena::CreateMaybeMessage< ::vs::TagFractureSectionGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagFractureSectionGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::VsValueMap_ValueMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::VsValueMap_ValueMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::VsValueMap_ValueMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::VsValueMap* Arena::CreateMaybeMessage< ::vs::VsValueMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::VsValueMap >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagFractureSectionGetResp* Arena::CreateMaybeMessage< ::vs::TagFractureSectionGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagFractureSectionGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagCountByRangeGetReq* Arena::CreateMaybeMessage< ::vs::TagCountByRangeGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagCountByRangeGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagCountByRangeGetResp* Arena::CreateMaybeMessage< ::vs::TagCountByRangeGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagCountByRangeGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagListGetReq* Arena::CreateMaybeMessage< ::vs::TagListGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagListGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagListGetResp_TagInfoMap_InfosEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagListGetResp_TagInfoMap* Arena::CreateMaybeMessage< ::vs::TagListGetResp_TagInfoMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagListGetResp_TagInfoMap >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagListGetResp* Arena::CreateMaybeMessage< ::vs::TagListGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagListGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::DbPingReq* Arena::CreateMaybeMessage< ::vs::DbPingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::DbPingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::DbPingResp* Arena::CreateMaybeMessage< ::vs::DbPingResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::DbPingResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::VsValue* Arena::CreateMaybeMessage< ::vs::VsValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::VsValue >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagValuesByCountGetReq_MetaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagValuesByCountGetReq* Arena::CreateMaybeMessage< ::vs::TagValuesByCountGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagValuesByCountGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagValuesByCountGetResp* Arena::CreateMaybeMessage< ::vs::TagValuesByCountGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagValuesByCountGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagValuesGetReq_ExtendEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::TagValuesGetReq_ExtendEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagValuesGetReq_ExtendEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagValuesGetReq* Arena::CreateMaybeMessage< ::vs::TagValuesGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagValuesGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagValuesGetResp* Arena::CreateMaybeMessage< ::vs::TagValuesGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagValuesGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagFeatureGetReq* Arena::CreateMaybeMessage< ::vs::TagFeatureGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagFeatureGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagFeatureGetResp_FeatsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::TagFeatureGetResp_FeatsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagFeatureGetResp_FeatsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagFeatureGetResp* Arena::CreateMaybeMessage< ::vs::TagFeatureGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagFeatureGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagDescGetReq* Arena::CreateMaybeMessage< ::vs::TagDescGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagDescGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagDescGetResp_DescEntry_DoNotUse* Arena::CreateMaybeMessage< ::vs::TagDescGetResp_DescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagDescGetResp_DescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagDescGetResp* Arena::CreateMaybeMessage< ::vs::TagDescGetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagDescGetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagTimeSectionReq* Arena::CreateMaybeMessage< ::vs::TagTimeSectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagTimeSectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagTimeSectionResp* Arena::CreateMaybeMessage< ::vs::TagTimeSectionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagTimeSectionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::ServiceStopReq* Arena::CreateMaybeMessage< ::vs::ServiceStopReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::ServiceStopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::ServiceStopResp* Arena::CreateMaybeMessage< ::vs::ServiceStopResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::ServiceStopResp >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagSnapshotValueReq* Arena::CreateMaybeMessage< ::vs::TagSnapshotValueReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagSnapshotValueReq >(arena);
}
template<> PROTOBUF_NOINLINE ::vs::TagSnapshotValueResp* Arena::CreateMaybeMessage< ::vs::TagSnapshotValueResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vs::TagSnapshotValueResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
