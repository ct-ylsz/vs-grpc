// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vs.proto
#ifndef GRPC_vs_2eproto__INCLUDED
#define GRPC_vs_2eproto__INCLUDED

#include "vs.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vs {

// Vs 服务
class VsService final {
 public:
  static constexpr char const* service_full_name() {
    return "vs.VsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 具体的值获取
    virtual ::grpc::Status TagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::vs::TagValuesGetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesGetResp>> AsyncTagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesGetResp>>(AsyncTagValuesGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesGetResp>> PrepareAsyncTagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesGetResp>>(PrepareAsyncTagValuesGetRaw(context, request, cq));
    }
    // 获取tag的特征值
    virtual ::grpc::Status TagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::vs::TagFeatureGetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagFeatureGetResp>> AsyncTagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagFeatureGetResp>>(AsyncTagFeatureGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagFeatureGetResp>> PrepareAsyncTagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagFeatureGetResp>>(PrepareAsyncTagFeatureGetRaw(context, request, cq));
    }
    // 获取tag开始时间和结束时间
    virtual ::grpc::Status TagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::vs::TagTimeSectionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagTimeSectionResp>> AsyncTagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagTimeSectionResp>>(AsyncTagTimeSectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagTimeSectionResp>> PrepareAsyncTagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagTimeSectionResp>>(PrepareAsyncTagTimeSectionRaw(context, request, cq));
    }
    // 获取测点描述字段
    virtual ::grpc::Status TagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::vs::TagDescGetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagDescGetResp>> AsyncTagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagDescGetResp>>(AsyncTagDescGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagDescGetResp>> PrepareAsyncTagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagDescGetResp>>(PrepareAsyncTagDescGetRaw(context, request, cq));
    }
    // 数据库ping
    virtual ::grpc::Status DbPing(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::vs::DbPingResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::DbPingResp>> AsyncDbPing(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::DbPingResp>>(AsyncDbPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::DbPingResp>> PrepareAsyncDbPing(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::DbPingResp>>(PrepareAsyncDbPingRaw(context, request, cq));
    }
    // 配置文件设置
    virtual ::grpc::Status ConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::vs::ConfigFileSetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ConfigFileSetResp>> AsyncConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ConfigFileSetResp>>(AsyncConfigFileSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ConfigFileSetResp>> PrepareAsyncConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ConfigFileSetResp>>(PrepareAsyncConfigFileSetRaw(context, request, cq));
    }
    // 获取范围内tag的数量
    virtual ::grpc::Status TagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::vs::TagCountByRangeGetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagCountByRangeGetResp>> AsyncTagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagCountByRangeGetResp>>(AsyncTagCountByRangeGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagCountByRangeGetResp>> PrepareAsyncTagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagCountByRangeGetResp>>(PrepareAsyncTagCountByRangeGetRaw(context, request, cq));
    }
    // 获取Tag的列表
    virtual ::grpc::Status TagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::vs::TagListGetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagListGetResp>> AsyncTagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagListGetResp>>(AsyncTagListGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagListGetResp>> PrepareAsyncTagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagListGetResp>>(PrepareAsyncTagListGetRaw(context, request, cq));
    }
    // 分数量获取tagValue
    virtual ::grpc::Status TagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::vs::TagValuesByCountGetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesByCountGetResp>> AsyncTagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesByCountGetResp>>(AsyncTagValuesByCountGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesByCountGetResp>> PrepareAsyncTagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesByCountGetResp>>(PrepareAsyncTagValuesByCountGetRaw(context, request, cq));
    }
    // 退出程序
    virtual ::grpc::Status ServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::vs::ServiceStopResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ServiceStopResp>> AsyncServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ServiceStopResp>>(AsyncServiceStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ServiceStopResp>> PrepareAsyncServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::ServiceStopResp>>(PrepareAsyncServiceStopRaw(context, request, cq));
    }
    // 获取快照值
    virtual ::grpc::Status TagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::vs::TagSnapshotValueResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagSnapshotValueResp>> AsyncTagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagSnapshotValueResp>>(AsyncTagSnapshotValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagSnapshotValueResp>> PrepareAsyncTagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagSnapshotValueResp>>(PrepareAsyncTagSnapshotValueRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 具体的值获取
      virtual void TagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq* request, ::vs::TagValuesGetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq* request, ::vs::TagValuesGetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取tag的特征值
      virtual void TagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq* request, ::vs::TagFeatureGetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq* request, ::vs::TagFeatureGetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取tag开始时间和结束时间
      virtual void TagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq* request, ::vs::TagTimeSectionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq* request, ::vs::TagTimeSectionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取测点描述字段
      virtual void TagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq* request, ::vs::TagDescGetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq* request, ::vs::TagDescGetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 数据库ping
      virtual void DbPing(::grpc::ClientContext* context, const ::vs::DbPingReq* request, ::vs::DbPingResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DbPing(::grpc::ClientContext* context, const ::vs::DbPingReq* request, ::vs::DbPingResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 配置文件设置
      virtual void ConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq* request, ::vs::ConfigFileSetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq* request, ::vs::ConfigFileSetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取范围内tag的数量
      virtual void TagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq* request, ::vs::TagCountByRangeGetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq* request, ::vs::TagCountByRangeGetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取Tag的列表
      virtual void TagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq* request, ::vs::TagListGetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq* request, ::vs::TagListGetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 分数量获取tagValue
      virtual void TagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq* request, ::vs::TagValuesByCountGetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq* request, ::vs::TagValuesByCountGetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 退出程序
      virtual void ServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq* request, ::vs::ServiceStopResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq* request, ::vs::ServiceStopResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取快照值
      virtual void TagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq* request, ::vs::TagSnapshotValueResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq* request, ::vs::TagSnapshotValueResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesGetResp>* AsyncTagValuesGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesGetResp>* PrepareAsyncTagValuesGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagFeatureGetResp>* AsyncTagFeatureGetRaw(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagFeatureGetResp>* PrepareAsyncTagFeatureGetRaw(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagTimeSectionResp>* AsyncTagTimeSectionRaw(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagTimeSectionResp>* PrepareAsyncTagTimeSectionRaw(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagDescGetResp>* AsyncTagDescGetRaw(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagDescGetResp>* PrepareAsyncTagDescGetRaw(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::DbPingResp>* AsyncDbPingRaw(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::DbPingResp>* PrepareAsyncDbPingRaw(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::ConfigFileSetResp>* AsyncConfigFileSetRaw(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::ConfigFileSetResp>* PrepareAsyncConfigFileSetRaw(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagCountByRangeGetResp>* AsyncTagCountByRangeGetRaw(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagCountByRangeGetResp>* PrepareAsyncTagCountByRangeGetRaw(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagListGetResp>* AsyncTagListGetRaw(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagListGetResp>* PrepareAsyncTagListGetRaw(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesByCountGetResp>* AsyncTagValuesByCountGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagValuesByCountGetResp>* PrepareAsyncTagValuesByCountGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::ServiceStopResp>* AsyncServiceStopRaw(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::ServiceStopResp>* PrepareAsyncServiceStopRaw(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagSnapshotValueResp>* AsyncTagSnapshotValueRaw(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vs::TagSnapshotValueResp>* PrepareAsyncTagSnapshotValueRaw(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status TagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::vs::TagValuesGetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesGetResp>> AsyncTagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesGetResp>>(AsyncTagValuesGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesGetResp>> PrepareAsyncTagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesGetResp>>(PrepareAsyncTagValuesGetRaw(context, request, cq));
    }
    ::grpc::Status TagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::vs::TagFeatureGetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagFeatureGetResp>> AsyncTagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagFeatureGetResp>>(AsyncTagFeatureGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagFeatureGetResp>> PrepareAsyncTagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagFeatureGetResp>>(PrepareAsyncTagFeatureGetRaw(context, request, cq));
    }
    ::grpc::Status TagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::vs::TagTimeSectionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagTimeSectionResp>> AsyncTagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagTimeSectionResp>>(AsyncTagTimeSectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagTimeSectionResp>> PrepareAsyncTagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagTimeSectionResp>>(PrepareAsyncTagTimeSectionRaw(context, request, cq));
    }
    ::grpc::Status TagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::vs::TagDescGetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagDescGetResp>> AsyncTagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagDescGetResp>>(AsyncTagDescGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagDescGetResp>> PrepareAsyncTagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagDescGetResp>>(PrepareAsyncTagDescGetRaw(context, request, cq));
    }
    ::grpc::Status DbPing(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::vs::DbPingResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::DbPingResp>> AsyncDbPing(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::DbPingResp>>(AsyncDbPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::DbPingResp>> PrepareAsyncDbPing(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::DbPingResp>>(PrepareAsyncDbPingRaw(context, request, cq));
    }
    ::grpc::Status ConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::vs::ConfigFileSetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ConfigFileSetResp>> AsyncConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ConfigFileSetResp>>(AsyncConfigFileSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ConfigFileSetResp>> PrepareAsyncConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ConfigFileSetResp>>(PrepareAsyncConfigFileSetRaw(context, request, cq));
    }
    ::grpc::Status TagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::vs::TagCountByRangeGetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagCountByRangeGetResp>> AsyncTagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagCountByRangeGetResp>>(AsyncTagCountByRangeGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagCountByRangeGetResp>> PrepareAsyncTagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagCountByRangeGetResp>>(PrepareAsyncTagCountByRangeGetRaw(context, request, cq));
    }
    ::grpc::Status TagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::vs::TagListGetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagListGetResp>> AsyncTagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagListGetResp>>(AsyncTagListGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagListGetResp>> PrepareAsyncTagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagListGetResp>>(PrepareAsyncTagListGetRaw(context, request, cq));
    }
    ::grpc::Status TagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::vs::TagValuesByCountGetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesByCountGetResp>> AsyncTagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesByCountGetResp>>(AsyncTagValuesByCountGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesByCountGetResp>> PrepareAsyncTagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagValuesByCountGetResp>>(PrepareAsyncTagValuesByCountGetRaw(context, request, cq));
    }
    ::grpc::Status ServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::vs::ServiceStopResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ServiceStopResp>> AsyncServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ServiceStopResp>>(AsyncServiceStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ServiceStopResp>> PrepareAsyncServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::ServiceStopResp>>(PrepareAsyncServiceStopRaw(context, request, cq));
    }
    ::grpc::Status TagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::vs::TagSnapshotValueResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagSnapshotValueResp>> AsyncTagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagSnapshotValueResp>>(AsyncTagSnapshotValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagSnapshotValueResp>> PrepareAsyncTagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vs::TagSnapshotValueResp>>(PrepareAsyncTagSnapshotValueRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void TagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq* request, ::vs::TagValuesGetResp* response, std::function<void(::grpc::Status)>) override;
      void TagValuesGet(::grpc::ClientContext* context, const ::vs::TagValuesGetReq* request, ::vs::TagValuesGetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq* request, ::vs::TagFeatureGetResp* response, std::function<void(::grpc::Status)>) override;
      void TagFeatureGet(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq* request, ::vs::TagFeatureGetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq* request, ::vs::TagTimeSectionResp* response, std::function<void(::grpc::Status)>) override;
      void TagTimeSection(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq* request, ::vs::TagTimeSectionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq* request, ::vs::TagDescGetResp* response, std::function<void(::grpc::Status)>) override;
      void TagDescGet(::grpc::ClientContext* context, const ::vs::TagDescGetReq* request, ::vs::TagDescGetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DbPing(::grpc::ClientContext* context, const ::vs::DbPingReq* request, ::vs::DbPingResp* response, std::function<void(::grpc::Status)>) override;
      void DbPing(::grpc::ClientContext* context, const ::vs::DbPingReq* request, ::vs::DbPingResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq* request, ::vs::ConfigFileSetResp* response, std::function<void(::grpc::Status)>) override;
      void ConfigFileSet(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq* request, ::vs::ConfigFileSetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq* request, ::vs::TagCountByRangeGetResp* response, std::function<void(::grpc::Status)>) override;
      void TagCountByRangeGet(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq* request, ::vs::TagCountByRangeGetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq* request, ::vs::TagListGetResp* response, std::function<void(::grpc::Status)>) override;
      void TagListGet(::grpc::ClientContext* context, const ::vs::TagListGetReq* request, ::vs::TagListGetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq* request, ::vs::TagValuesByCountGetResp* response, std::function<void(::grpc::Status)>) override;
      void TagValuesByCountGet(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq* request, ::vs::TagValuesByCountGetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq* request, ::vs::ServiceStopResp* response, std::function<void(::grpc::Status)>) override;
      void ServiceStop(::grpc::ClientContext* context, const ::vs::ServiceStopReq* request, ::vs::ServiceStopResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq* request, ::vs::TagSnapshotValueResp* response, std::function<void(::grpc::Status)>) override;
      void TagSnapshotValue(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq* request, ::vs::TagSnapshotValueResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vs::TagValuesGetResp>* AsyncTagValuesGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagValuesGetResp>* PrepareAsyncTagValuesGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagFeatureGetResp>* AsyncTagFeatureGetRaw(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagFeatureGetResp>* PrepareAsyncTagFeatureGetRaw(::grpc::ClientContext* context, const ::vs::TagFeatureGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagTimeSectionResp>* AsyncTagTimeSectionRaw(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagTimeSectionResp>* PrepareAsyncTagTimeSectionRaw(::grpc::ClientContext* context, const ::vs::TagTimeSectionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagDescGetResp>* AsyncTagDescGetRaw(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagDescGetResp>* PrepareAsyncTagDescGetRaw(::grpc::ClientContext* context, const ::vs::TagDescGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::DbPingResp>* AsyncDbPingRaw(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::DbPingResp>* PrepareAsyncDbPingRaw(::grpc::ClientContext* context, const ::vs::DbPingReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::ConfigFileSetResp>* AsyncConfigFileSetRaw(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::ConfigFileSetResp>* PrepareAsyncConfigFileSetRaw(::grpc::ClientContext* context, const ::vs::ConfigFileSetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagCountByRangeGetResp>* AsyncTagCountByRangeGetRaw(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagCountByRangeGetResp>* PrepareAsyncTagCountByRangeGetRaw(::grpc::ClientContext* context, const ::vs::TagCountByRangeGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagListGetResp>* AsyncTagListGetRaw(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagListGetResp>* PrepareAsyncTagListGetRaw(::grpc::ClientContext* context, const ::vs::TagListGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagValuesByCountGetResp>* AsyncTagValuesByCountGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagValuesByCountGetResp>* PrepareAsyncTagValuesByCountGetRaw(::grpc::ClientContext* context, const ::vs::TagValuesByCountGetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::ServiceStopResp>* AsyncServiceStopRaw(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::ServiceStopResp>* PrepareAsyncServiceStopRaw(::grpc::ClientContext* context, const ::vs::ServiceStopReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagSnapshotValueResp>* AsyncTagSnapshotValueRaw(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vs::TagSnapshotValueResp>* PrepareAsyncTagSnapshotValueRaw(::grpc::ClientContext* context, const ::vs::TagSnapshotValueReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TagValuesGet_;
    const ::grpc::internal::RpcMethod rpcmethod_TagFeatureGet_;
    const ::grpc::internal::RpcMethod rpcmethod_TagTimeSection_;
    const ::grpc::internal::RpcMethod rpcmethod_TagDescGet_;
    const ::grpc::internal::RpcMethod rpcmethod_DbPing_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfigFileSet_;
    const ::grpc::internal::RpcMethod rpcmethod_TagCountByRangeGet_;
    const ::grpc::internal::RpcMethod rpcmethod_TagListGet_;
    const ::grpc::internal::RpcMethod rpcmethod_TagValuesByCountGet_;
    const ::grpc::internal::RpcMethod rpcmethod_ServiceStop_;
    const ::grpc::internal::RpcMethod rpcmethod_TagSnapshotValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 具体的值获取
    virtual ::grpc::Status TagValuesGet(::grpc::ServerContext* context, const ::vs::TagValuesGetReq* request, ::vs::TagValuesGetResp* response);
    // 获取tag的特征值
    virtual ::grpc::Status TagFeatureGet(::grpc::ServerContext* context, const ::vs::TagFeatureGetReq* request, ::vs::TagFeatureGetResp* response);
    // 获取tag开始时间和结束时间
    virtual ::grpc::Status TagTimeSection(::grpc::ServerContext* context, const ::vs::TagTimeSectionReq* request, ::vs::TagTimeSectionResp* response);
    // 获取测点描述字段
    virtual ::grpc::Status TagDescGet(::grpc::ServerContext* context, const ::vs::TagDescGetReq* request, ::vs::TagDescGetResp* response);
    // 数据库ping
    virtual ::grpc::Status DbPing(::grpc::ServerContext* context, const ::vs::DbPingReq* request, ::vs::DbPingResp* response);
    // 配置文件设置
    virtual ::grpc::Status ConfigFileSet(::grpc::ServerContext* context, const ::vs::ConfigFileSetReq* request, ::vs::ConfigFileSetResp* response);
    // 获取范围内tag的数量
    virtual ::grpc::Status TagCountByRangeGet(::grpc::ServerContext* context, const ::vs::TagCountByRangeGetReq* request, ::vs::TagCountByRangeGetResp* response);
    // 获取Tag的列表
    virtual ::grpc::Status TagListGet(::grpc::ServerContext* context, const ::vs::TagListGetReq* request, ::vs::TagListGetResp* response);
    // 分数量获取tagValue
    virtual ::grpc::Status TagValuesByCountGet(::grpc::ServerContext* context, const ::vs::TagValuesByCountGetReq* request, ::vs::TagValuesByCountGetResp* response);
    // 退出程序
    virtual ::grpc::Status ServiceStop(::grpc::ServerContext* context, const ::vs::ServiceStopReq* request, ::vs::ServiceStopResp* response);
    // 获取快照值
    virtual ::grpc::Status TagSnapshotValue(::grpc::ServerContext* context, const ::vs::TagSnapshotValueReq* request, ::vs::TagSnapshotValueResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TagValuesGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagValuesGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TagValuesGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesGetReq* /*request*/, ::vs::TagValuesGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagValuesGet(::grpc::ServerContext* context, ::vs::TagValuesGetReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagValuesGetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagFeatureGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagFeatureGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TagFeatureGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagFeatureGet(::grpc::ServerContext* /*context*/, const ::vs::TagFeatureGetReq* /*request*/, ::vs::TagFeatureGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagFeatureGet(::grpc::ServerContext* context, ::vs::TagFeatureGetReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagFeatureGetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagTimeSection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagTimeSection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TagTimeSection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagTimeSection(::grpc::ServerContext* /*context*/, const ::vs::TagTimeSectionReq* /*request*/, ::vs::TagTimeSectionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagTimeSection(::grpc::ServerContext* context, ::vs::TagTimeSectionReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagTimeSectionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagDescGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagDescGet() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TagDescGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagDescGet(::grpc::ServerContext* /*context*/, const ::vs::TagDescGetReq* /*request*/, ::vs::TagDescGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagDescGet(::grpc::ServerContext* context, ::vs::TagDescGetReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagDescGetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DbPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DbPing() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DbPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbPing(::grpc::ServerContext* /*context*/, const ::vs::DbPingReq* /*request*/, ::vs::DbPingResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbPing(::grpc::ServerContext* context, ::vs::DbPingReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::DbPingResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfigFileSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfigFileSet() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ConfigFileSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigFileSet(::grpc::ServerContext* /*context*/, const ::vs::ConfigFileSetReq* /*request*/, ::vs::ConfigFileSetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigFileSet(::grpc::ServerContext* context, ::vs::ConfigFileSetReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::ConfigFileSetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagCountByRangeGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagCountByRangeGet() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TagCountByRangeGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagCountByRangeGet(::grpc::ServerContext* /*context*/, const ::vs::TagCountByRangeGetReq* /*request*/, ::vs::TagCountByRangeGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagCountByRangeGet(::grpc::ServerContext* context, ::vs::TagCountByRangeGetReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagCountByRangeGetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagListGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagListGet() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_TagListGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagListGet(::grpc::ServerContext* /*context*/, const ::vs::TagListGetReq* /*request*/, ::vs::TagListGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagListGet(::grpc::ServerContext* context, ::vs::TagListGetReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagListGetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagValuesByCountGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagValuesByCountGet() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TagValuesByCountGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesByCountGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesByCountGetReq* /*request*/, ::vs::TagValuesByCountGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagValuesByCountGet(::grpc::ServerContext* context, ::vs::TagValuesByCountGetReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagValuesByCountGetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServiceStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServiceStop() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ServiceStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceStop(::grpc::ServerContext* /*context*/, const ::vs::ServiceStopReq* /*request*/, ::vs::ServiceStopResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServiceStop(::grpc::ServerContext* context, ::vs::ServiceStopReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::ServiceStopResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagSnapshotValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TagSnapshotValue() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_TagSnapshotValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagSnapshotValue(::grpc::ServerContext* /*context*/, const ::vs::TagSnapshotValueReq* /*request*/, ::vs::TagSnapshotValueResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagSnapshotValue(::grpc::ServerContext* context, ::vs::TagSnapshotValueReq* request, ::grpc::ServerAsyncResponseWriter< ::vs::TagSnapshotValueResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TagValuesGet<WithAsyncMethod_TagFeatureGet<WithAsyncMethod_TagTimeSection<WithAsyncMethod_TagDescGet<WithAsyncMethod_DbPing<WithAsyncMethod_ConfigFileSet<WithAsyncMethod_TagCountByRangeGet<WithAsyncMethod_TagListGet<WithAsyncMethod_TagValuesByCountGet<WithAsyncMethod_ServiceStop<WithAsyncMethod_TagSnapshotValue<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_TagValuesGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagValuesGet() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagValuesGetReq, ::vs::TagValuesGetResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagValuesGetReq* request, ::vs::TagValuesGetResp* response) { return this->TagValuesGet(context, request, response); }));}
    void SetMessageAllocatorFor_TagValuesGet(
        ::grpc::MessageAllocator< ::vs::TagValuesGetReq, ::vs::TagValuesGetResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagValuesGetReq, ::vs::TagValuesGetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagValuesGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesGetReq* /*request*/, ::vs::TagValuesGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagValuesGet(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagValuesGetReq* /*request*/, ::vs::TagValuesGetResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TagFeatureGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagFeatureGet() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagFeatureGetReq, ::vs::TagFeatureGetResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagFeatureGetReq* request, ::vs::TagFeatureGetResp* response) { return this->TagFeatureGet(context, request, response); }));}
    void SetMessageAllocatorFor_TagFeatureGet(
        ::grpc::MessageAllocator< ::vs::TagFeatureGetReq, ::vs::TagFeatureGetResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagFeatureGetReq, ::vs::TagFeatureGetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagFeatureGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagFeatureGet(::grpc::ServerContext* /*context*/, const ::vs::TagFeatureGetReq* /*request*/, ::vs::TagFeatureGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagFeatureGet(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagFeatureGetReq* /*request*/, ::vs::TagFeatureGetResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TagTimeSection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagTimeSection() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagTimeSectionReq, ::vs::TagTimeSectionResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagTimeSectionReq* request, ::vs::TagTimeSectionResp* response) { return this->TagTimeSection(context, request, response); }));}
    void SetMessageAllocatorFor_TagTimeSection(
        ::grpc::MessageAllocator< ::vs::TagTimeSectionReq, ::vs::TagTimeSectionResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagTimeSectionReq, ::vs::TagTimeSectionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagTimeSection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagTimeSection(::grpc::ServerContext* /*context*/, const ::vs::TagTimeSectionReq* /*request*/, ::vs::TagTimeSectionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagTimeSection(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagTimeSectionReq* /*request*/, ::vs::TagTimeSectionResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TagDescGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagDescGet() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagDescGetReq, ::vs::TagDescGetResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagDescGetReq* request, ::vs::TagDescGetResp* response) { return this->TagDescGet(context, request, response); }));}
    void SetMessageAllocatorFor_TagDescGet(
        ::grpc::MessageAllocator< ::vs::TagDescGetReq, ::vs::TagDescGetResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagDescGetReq, ::vs::TagDescGetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagDescGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagDescGet(::grpc::ServerContext* /*context*/, const ::vs::TagDescGetReq* /*request*/, ::vs::TagDescGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagDescGet(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagDescGetReq* /*request*/, ::vs::TagDescGetResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DbPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DbPing() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::DbPingReq, ::vs::DbPingResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::DbPingReq* request, ::vs::DbPingResp* response) { return this->DbPing(context, request, response); }));}
    void SetMessageAllocatorFor_DbPing(
        ::grpc::MessageAllocator< ::vs::DbPingReq, ::vs::DbPingResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::DbPingReq, ::vs::DbPingResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DbPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbPing(::grpc::ServerContext* /*context*/, const ::vs::DbPingReq* /*request*/, ::vs::DbPingResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbPing(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::DbPingReq* /*request*/, ::vs::DbPingResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConfigFileSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConfigFileSet() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::ConfigFileSetReq, ::vs::ConfigFileSetResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::ConfigFileSetReq* request, ::vs::ConfigFileSetResp* response) { return this->ConfigFileSet(context, request, response); }));}
    void SetMessageAllocatorFor_ConfigFileSet(
        ::grpc::MessageAllocator< ::vs::ConfigFileSetReq, ::vs::ConfigFileSetResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::ConfigFileSetReq, ::vs::ConfigFileSetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConfigFileSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigFileSet(::grpc::ServerContext* /*context*/, const ::vs::ConfigFileSetReq* /*request*/, ::vs::ConfigFileSetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfigFileSet(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::ConfigFileSetReq* /*request*/, ::vs::ConfigFileSetResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TagCountByRangeGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagCountByRangeGet() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagCountByRangeGetReq, ::vs::TagCountByRangeGetResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagCountByRangeGetReq* request, ::vs::TagCountByRangeGetResp* response) { return this->TagCountByRangeGet(context, request, response); }));}
    void SetMessageAllocatorFor_TagCountByRangeGet(
        ::grpc::MessageAllocator< ::vs::TagCountByRangeGetReq, ::vs::TagCountByRangeGetResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagCountByRangeGetReq, ::vs::TagCountByRangeGetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagCountByRangeGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagCountByRangeGet(::grpc::ServerContext* /*context*/, const ::vs::TagCountByRangeGetReq* /*request*/, ::vs::TagCountByRangeGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagCountByRangeGet(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagCountByRangeGetReq* /*request*/, ::vs::TagCountByRangeGetResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TagListGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagListGet() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagListGetReq, ::vs::TagListGetResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagListGetReq* request, ::vs::TagListGetResp* response) { return this->TagListGet(context, request, response); }));}
    void SetMessageAllocatorFor_TagListGet(
        ::grpc::MessageAllocator< ::vs::TagListGetReq, ::vs::TagListGetResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagListGetReq, ::vs::TagListGetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagListGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagListGet(::grpc::ServerContext* /*context*/, const ::vs::TagListGetReq* /*request*/, ::vs::TagListGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagListGet(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagListGetReq* /*request*/, ::vs::TagListGetResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TagValuesByCountGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagValuesByCountGet() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagValuesByCountGetReq, ::vs::TagValuesByCountGetResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagValuesByCountGetReq* request, ::vs::TagValuesByCountGetResp* response) { return this->TagValuesByCountGet(context, request, response); }));}
    void SetMessageAllocatorFor_TagValuesByCountGet(
        ::grpc::MessageAllocator< ::vs::TagValuesByCountGetReq, ::vs::TagValuesByCountGetResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagValuesByCountGetReq, ::vs::TagValuesByCountGetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagValuesByCountGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesByCountGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesByCountGetReq* /*request*/, ::vs::TagValuesByCountGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagValuesByCountGet(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagValuesByCountGetReq* /*request*/, ::vs::TagValuesByCountGetResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServiceStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServiceStop() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::ServiceStopReq, ::vs::ServiceStopResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::ServiceStopReq* request, ::vs::ServiceStopResp* response) { return this->ServiceStop(context, request, response); }));}
    void SetMessageAllocatorFor_ServiceStop(
        ::grpc::MessageAllocator< ::vs::ServiceStopReq, ::vs::ServiceStopResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::ServiceStopReq, ::vs::ServiceStopResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServiceStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceStop(::grpc::ServerContext* /*context*/, const ::vs::ServiceStopReq* /*request*/, ::vs::ServiceStopResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServiceStop(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::ServiceStopReq* /*request*/, ::vs::ServiceStopResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TagSnapshotValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TagSnapshotValue() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::vs::TagSnapshotValueReq, ::vs::TagSnapshotValueResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vs::TagSnapshotValueReq* request, ::vs::TagSnapshotValueResp* response) { return this->TagSnapshotValue(context, request, response); }));}
    void SetMessageAllocatorFor_TagSnapshotValue(
        ::grpc::MessageAllocator< ::vs::TagSnapshotValueReq, ::vs::TagSnapshotValueResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vs::TagSnapshotValueReq, ::vs::TagSnapshotValueResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TagSnapshotValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagSnapshotValue(::grpc::ServerContext* /*context*/, const ::vs::TagSnapshotValueReq* /*request*/, ::vs::TagSnapshotValueResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagSnapshotValue(
      ::grpc::CallbackServerContext* /*context*/, const ::vs::TagSnapshotValueReq* /*request*/, ::vs::TagSnapshotValueResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_TagValuesGet<WithCallbackMethod_TagFeatureGet<WithCallbackMethod_TagTimeSection<WithCallbackMethod_TagDescGet<WithCallbackMethod_DbPing<WithCallbackMethod_ConfigFileSet<WithCallbackMethod_TagCountByRangeGet<WithCallbackMethod_TagListGet<WithCallbackMethod_TagValuesByCountGet<WithCallbackMethod_ServiceStop<WithCallbackMethod_TagSnapshotValue<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TagValuesGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagValuesGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TagValuesGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesGetReq* /*request*/, ::vs::TagValuesGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagFeatureGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagFeatureGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TagFeatureGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagFeatureGet(::grpc::ServerContext* /*context*/, const ::vs::TagFeatureGetReq* /*request*/, ::vs::TagFeatureGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagTimeSection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagTimeSection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TagTimeSection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagTimeSection(::grpc::ServerContext* /*context*/, const ::vs::TagTimeSectionReq* /*request*/, ::vs::TagTimeSectionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagDescGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagDescGet() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TagDescGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagDescGet(::grpc::ServerContext* /*context*/, const ::vs::TagDescGetReq* /*request*/, ::vs::TagDescGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DbPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DbPing() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DbPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbPing(::grpc::ServerContext* /*context*/, const ::vs::DbPingReq* /*request*/, ::vs::DbPingResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfigFileSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfigFileSet() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ConfigFileSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigFileSet(::grpc::ServerContext* /*context*/, const ::vs::ConfigFileSetReq* /*request*/, ::vs::ConfigFileSetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagCountByRangeGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagCountByRangeGet() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TagCountByRangeGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagCountByRangeGet(::grpc::ServerContext* /*context*/, const ::vs::TagCountByRangeGetReq* /*request*/, ::vs::TagCountByRangeGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagListGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagListGet() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_TagListGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagListGet(::grpc::ServerContext* /*context*/, const ::vs::TagListGetReq* /*request*/, ::vs::TagListGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagValuesByCountGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagValuesByCountGet() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TagValuesByCountGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesByCountGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesByCountGetReq* /*request*/, ::vs::TagValuesByCountGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServiceStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServiceStop() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ServiceStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceStop(::grpc::ServerContext* /*context*/, const ::vs::ServiceStopReq* /*request*/, ::vs::ServiceStopResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagSnapshotValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TagSnapshotValue() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_TagSnapshotValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagSnapshotValue(::grpc::ServerContext* /*context*/, const ::vs::TagSnapshotValueReq* /*request*/, ::vs::TagSnapshotValueResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagValuesGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagValuesGet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TagValuesGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesGetReq* /*request*/, ::vs::TagValuesGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagValuesGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagFeatureGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagFeatureGet() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TagFeatureGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagFeatureGet(::grpc::ServerContext* /*context*/, const ::vs::TagFeatureGetReq* /*request*/, ::vs::TagFeatureGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagFeatureGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagTimeSection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagTimeSection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TagTimeSection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagTimeSection(::grpc::ServerContext* /*context*/, const ::vs::TagTimeSectionReq* /*request*/, ::vs::TagTimeSectionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagTimeSection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagDescGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagDescGet() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TagDescGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagDescGet(::grpc::ServerContext* /*context*/, const ::vs::TagDescGetReq* /*request*/, ::vs::TagDescGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagDescGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DbPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DbPing() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DbPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbPing(::grpc::ServerContext* /*context*/, const ::vs::DbPingReq* /*request*/, ::vs::DbPingResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfigFileSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfigFileSet() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ConfigFileSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigFileSet(::grpc::ServerContext* /*context*/, const ::vs::ConfigFileSetReq* /*request*/, ::vs::ConfigFileSetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfigFileSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagCountByRangeGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagCountByRangeGet() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TagCountByRangeGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagCountByRangeGet(::grpc::ServerContext* /*context*/, const ::vs::TagCountByRangeGetReq* /*request*/, ::vs::TagCountByRangeGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagCountByRangeGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagListGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagListGet() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_TagListGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagListGet(::grpc::ServerContext* /*context*/, const ::vs::TagListGetReq* /*request*/, ::vs::TagListGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagListGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagValuesByCountGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagValuesByCountGet() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_TagValuesByCountGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesByCountGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesByCountGetReq* /*request*/, ::vs::TagValuesByCountGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagValuesByCountGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServiceStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServiceStop() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ServiceStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceStop(::grpc::ServerContext* /*context*/, const ::vs::ServiceStopReq* /*request*/, ::vs::ServiceStopResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServiceStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagSnapshotValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TagSnapshotValue() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_TagSnapshotValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagSnapshotValue(::grpc::ServerContext* /*context*/, const ::vs::TagSnapshotValueReq* /*request*/, ::vs::TagSnapshotValueResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagSnapshotValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagValuesGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagValuesGet() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagValuesGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagValuesGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesGetReq* /*request*/, ::vs::TagValuesGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagValuesGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagFeatureGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagFeatureGet() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagFeatureGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagFeatureGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagFeatureGet(::grpc::ServerContext* /*context*/, const ::vs::TagFeatureGetReq* /*request*/, ::vs::TagFeatureGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagFeatureGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagTimeSection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagTimeSection() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagTimeSection(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagTimeSection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagTimeSection(::grpc::ServerContext* /*context*/, const ::vs::TagTimeSectionReq* /*request*/, ::vs::TagTimeSectionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagTimeSection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagDescGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagDescGet() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagDescGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagDescGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagDescGet(::grpc::ServerContext* /*context*/, const ::vs::TagDescGetReq* /*request*/, ::vs::TagDescGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagDescGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DbPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DbPing() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DbPing(context, request, response); }));
    }
    ~WithRawCallbackMethod_DbPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbPing(::grpc::ServerContext* /*context*/, const ::vs::DbPingReq* /*request*/, ::vs::DbPingResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbPing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConfigFileSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConfigFileSet() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConfigFileSet(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConfigFileSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfigFileSet(::grpc::ServerContext* /*context*/, const ::vs::ConfigFileSetReq* /*request*/, ::vs::ConfigFileSetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfigFileSet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagCountByRangeGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagCountByRangeGet() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagCountByRangeGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagCountByRangeGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagCountByRangeGet(::grpc::ServerContext* /*context*/, const ::vs::TagCountByRangeGetReq* /*request*/, ::vs::TagCountByRangeGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagCountByRangeGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagListGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagListGet() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagListGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagListGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagListGet(::grpc::ServerContext* /*context*/, const ::vs::TagListGetReq* /*request*/, ::vs::TagListGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagListGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagValuesByCountGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagValuesByCountGet() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagValuesByCountGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagValuesByCountGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagValuesByCountGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesByCountGetReq* /*request*/, ::vs::TagValuesByCountGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagValuesByCountGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServiceStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServiceStop() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServiceStop(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServiceStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceStop(::grpc::ServerContext* /*context*/, const ::vs::ServiceStopReq* /*request*/, ::vs::ServiceStopResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServiceStop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TagSnapshotValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TagSnapshotValue() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TagSnapshotValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_TagSnapshotValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagSnapshotValue(::grpc::ServerContext* /*context*/, const ::vs::TagSnapshotValueReq* /*request*/, ::vs::TagSnapshotValueResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TagSnapshotValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagValuesGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagValuesGet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagValuesGetReq, ::vs::TagValuesGetResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagValuesGetReq, ::vs::TagValuesGetResp>* streamer) {
                       return this->StreamedTagValuesGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagValuesGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagValuesGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesGetReq* /*request*/, ::vs::TagValuesGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagValuesGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagValuesGetReq,::vs::TagValuesGetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagFeatureGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagFeatureGet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagFeatureGetReq, ::vs::TagFeatureGetResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagFeatureGetReq, ::vs::TagFeatureGetResp>* streamer) {
                       return this->StreamedTagFeatureGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagFeatureGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagFeatureGet(::grpc::ServerContext* /*context*/, const ::vs::TagFeatureGetReq* /*request*/, ::vs::TagFeatureGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagFeatureGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagFeatureGetReq,::vs::TagFeatureGetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagTimeSection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagTimeSection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagTimeSectionReq, ::vs::TagTimeSectionResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagTimeSectionReq, ::vs::TagTimeSectionResp>* streamer) {
                       return this->StreamedTagTimeSection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagTimeSection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagTimeSection(::grpc::ServerContext* /*context*/, const ::vs::TagTimeSectionReq* /*request*/, ::vs::TagTimeSectionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagTimeSection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagTimeSectionReq,::vs::TagTimeSectionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagDescGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagDescGet() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagDescGetReq, ::vs::TagDescGetResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagDescGetReq, ::vs::TagDescGetResp>* streamer) {
                       return this->StreamedTagDescGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagDescGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagDescGet(::grpc::ServerContext* /*context*/, const ::vs::TagDescGetReq* /*request*/, ::vs::TagDescGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagDescGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagDescGetReq,::vs::TagDescGetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DbPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DbPing() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::DbPingReq, ::vs::DbPingResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::DbPingReq, ::vs::DbPingResp>* streamer) {
                       return this->StreamedDbPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DbPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DbPing(::grpc::ServerContext* /*context*/, const ::vs::DbPingReq* /*request*/, ::vs::DbPingResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDbPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::DbPingReq,::vs::DbPingResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfigFileSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConfigFileSet() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::ConfigFileSetReq, ::vs::ConfigFileSetResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::ConfigFileSetReq, ::vs::ConfigFileSetResp>* streamer) {
                       return this->StreamedConfigFileSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConfigFileSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfigFileSet(::grpc::ServerContext* /*context*/, const ::vs::ConfigFileSetReq* /*request*/, ::vs::ConfigFileSetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfigFileSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::ConfigFileSetReq,::vs::ConfigFileSetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagCountByRangeGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagCountByRangeGet() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagCountByRangeGetReq, ::vs::TagCountByRangeGetResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagCountByRangeGetReq, ::vs::TagCountByRangeGetResp>* streamer) {
                       return this->StreamedTagCountByRangeGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagCountByRangeGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagCountByRangeGet(::grpc::ServerContext* /*context*/, const ::vs::TagCountByRangeGetReq* /*request*/, ::vs::TagCountByRangeGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagCountByRangeGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagCountByRangeGetReq,::vs::TagCountByRangeGetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagListGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagListGet() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagListGetReq, ::vs::TagListGetResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagListGetReq, ::vs::TagListGetResp>* streamer) {
                       return this->StreamedTagListGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagListGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagListGet(::grpc::ServerContext* /*context*/, const ::vs::TagListGetReq* /*request*/, ::vs::TagListGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagListGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagListGetReq,::vs::TagListGetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagValuesByCountGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagValuesByCountGet() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagValuesByCountGetReq, ::vs::TagValuesByCountGetResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagValuesByCountGetReq, ::vs::TagValuesByCountGetResp>* streamer) {
                       return this->StreamedTagValuesByCountGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagValuesByCountGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagValuesByCountGet(::grpc::ServerContext* /*context*/, const ::vs::TagValuesByCountGetReq* /*request*/, ::vs::TagValuesByCountGetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagValuesByCountGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagValuesByCountGetReq,::vs::TagValuesByCountGetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServiceStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServiceStop() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::ServiceStopReq, ::vs::ServiceStopResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::ServiceStopReq, ::vs::ServiceStopResp>* streamer) {
                       return this->StreamedServiceStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServiceStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServiceStop(::grpc::ServerContext* /*context*/, const ::vs::ServiceStopReq* /*request*/, ::vs::ServiceStopResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServiceStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::ServiceStopReq,::vs::ServiceStopResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagSnapshotValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TagSnapshotValue() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vs::TagSnapshotValueReq, ::vs::TagSnapshotValueResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vs::TagSnapshotValueReq, ::vs::TagSnapshotValueResp>* streamer) {
                       return this->StreamedTagSnapshotValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TagSnapshotValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagSnapshotValue(::grpc::ServerContext* /*context*/, const ::vs::TagSnapshotValueReq* /*request*/, ::vs::TagSnapshotValueResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagSnapshotValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vs::TagSnapshotValueReq,::vs::TagSnapshotValueResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TagValuesGet<WithStreamedUnaryMethod_TagFeatureGet<WithStreamedUnaryMethod_TagTimeSection<WithStreamedUnaryMethod_TagDescGet<WithStreamedUnaryMethod_DbPing<WithStreamedUnaryMethod_ConfigFileSet<WithStreamedUnaryMethod_TagCountByRangeGet<WithStreamedUnaryMethod_TagListGet<WithStreamedUnaryMethod_TagValuesByCountGet<WithStreamedUnaryMethod_ServiceStop<WithStreamedUnaryMethod_TagSnapshotValue<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TagValuesGet<WithStreamedUnaryMethod_TagFeatureGet<WithStreamedUnaryMethod_TagTimeSection<WithStreamedUnaryMethod_TagDescGet<WithStreamedUnaryMethod_DbPing<WithStreamedUnaryMethod_ConfigFileSet<WithStreamedUnaryMethod_TagCountByRangeGet<WithStreamedUnaryMethod_TagListGet<WithStreamedUnaryMethod_TagValuesByCountGet<WithStreamedUnaryMethod_ServiceStop<WithStreamedUnaryMethod_TagSnapshotValue<Service > > > > > > > > > > > StreamedService;
};

}  // namespace vs


#endif  // GRPC_vs_2eproto__INCLUDED
